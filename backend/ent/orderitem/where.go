// Code generated by ent, DO NOT EDIT.

package orderitem

import (
	"sthl/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldID, id))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldOrderID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldProductID, v))
}

// PurchasedName applies equality check predicate on the "purchased_name" field. It's identical to PurchasedNameEQ.
func PurchasedName(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldPurchasedName, v))
}

// PurchasedPrice applies equality check predicate on the "purchased_price" field. It's identical to PurchasedPriceEQ.
func PurchasedPrice(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldPurchasedPrice, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldQuantity, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldOrderID, vs...))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldProductID, v))
}

// PurchasedNameEQ applies the EQ predicate on the "purchased_name" field.
func PurchasedNameEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldPurchasedName, v))
}

// PurchasedNameNEQ applies the NEQ predicate on the "purchased_name" field.
func PurchasedNameNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldPurchasedName, v))
}

// PurchasedNameIn applies the In predicate on the "purchased_name" field.
func PurchasedNameIn(vs ...string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldPurchasedName, vs...))
}

// PurchasedNameNotIn applies the NotIn predicate on the "purchased_name" field.
func PurchasedNameNotIn(vs ...string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldPurchasedName, vs...))
}

// PurchasedNameGT applies the GT predicate on the "purchased_name" field.
func PurchasedNameGT(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldPurchasedName, v))
}

// PurchasedNameGTE applies the GTE predicate on the "purchased_name" field.
func PurchasedNameGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldPurchasedName, v))
}

// PurchasedNameLT applies the LT predicate on the "purchased_name" field.
func PurchasedNameLT(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldPurchasedName, v))
}

// PurchasedNameLTE applies the LTE predicate on the "purchased_name" field.
func PurchasedNameLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldPurchasedName, v))
}

// PurchasedNameContains applies the Contains predicate on the "purchased_name" field.
func PurchasedNameContains(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldContains(FieldPurchasedName, v))
}

// PurchasedNameHasPrefix applies the HasPrefix predicate on the "purchased_name" field.
func PurchasedNameHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldHasPrefix(FieldPurchasedName, v))
}

// PurchasedNameHasSuffix applies the HasSuffix predicate on the "purchased_name" field.
func PurchasedNameHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldHasSuffix(FieldPurchasedName, v))
}

// PurchasedNameEqualFold applies the EqualFold predicate on the "purchased_name" field.
func PurchasedNameEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEqualFold(FieldPurchasedName, v))
}

// PurchasedNameContainsFold applies the ContainsFold predicate on the "purchased_name" field.
func PurchasedNameContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldContainsFold(FieldPurchasedName, v))
}

// PurchasedPriceEQ applies the EQ predicate on the "purchased_price" field.
func PurchasedPriceEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldPurchasedPrice, v))
}

// PurchasedPriceNEQ applies the NEQ predicate on the "purchased_price" field.
func PurchasedPriceNEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldPurchasedPrice, v))
}

// PurchasedPriceIn applies the In predicate on the "purchased_price" field.
func PurchasedPriceIn(vs ...float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldPurchasedPrice, vs...))
}

// PurchasedPriceNotIn applies the NotIn predicate on the "purchased_price" field.
func PurchasedPriceNotIn(vs ...float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldPurchasedPrice, vs...))
}

// PurchasedPriceGT applies the GT predicate on the "purchased_price" field.
func PurchasedPriceGT(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldPurchasedPrice, v))
}

// PurchasedPriceGTE applies the GTE predicate on the "purchased_price" field.
func PurchasedPriceGTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldPurchasedPrice, v))
}

// PurchasedPriceLT applies the LT predicate on the "purchased_price" field.
func PurchasedPriceLT(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldPurchasedPrice, v))
}

// PurchasedPriceLTE applies the LTE predicate on the "purchased_price" field.
func PurchasedPriceLTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldPurchasedPrice, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldQuantity, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Order) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		p(s.Not())
	})
}
