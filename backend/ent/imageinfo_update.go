// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sthl/ent/imageinfo"
	"sthl/ent/predicate"
	"sthl/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ImageinfoUpdate is the builder for updating Imageinfo entities.
type ImageinfoUpdate struct {
	config
	hooks    []Hook
	mutation *ImageinfoMutation
}

// Where appends a list predicates to the ImageinfoUpdate builder.
func (iu *ImageinfoUpdate) Where(ps ...predicate.Imageinfo) *ImageinfoUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *ImageinfoUpdate) SetUpdatedAt(t time.Time) *ImageinfoUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetUserID sets the "user_id" field.
func (iu *ImageinfoUpdate) SetUserID(u uuid.UUID) *ImageinfoUpdate {
	iu.mutation.SetUserID(u)
	return iu
}

// SetImgURL sets the "img_url" field.
func (iu *ImageinfoUpdate) SetImgURL(s string) *ImageinfoUpdate {
	iu.mutation.SetImgURL(s)
	return iu
}

// SetImgName sets the "img_name" field.
func (iu *ImageinfoUpdate) SetImgName(s string) *ImageinfoUpdate {
	iu.mutation.SetImgName(s)
	return iu
}

// SetImgSize sets the "img_size" field.
func (iu *ImageinfoUpdate) SetImgSize(i int64) *ImageinfoUpdate {
	iu.mutation.ResetImgSize()
	iu.mutation.SetImgSize(i)
	return iu
}

// AddImgSize adds i to the "img_size" field.
func (iu *ImageinfoUpdate) AddImgSize(i int64) *ImageinfoUpdate {
	iu.mutation.AddImgSize(i)
	return iu
}

// SetImgS3IDKey sets the "img_s3_id_key" field.
func (iu *ImageinfoUpdate) SetImgS3IDKey(s string) *ImageinfoUpdate {
	iu.mutation.SetImgS3IDKey(s)
	return iu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (iu *ImageinfoUpdate) SetOwnerID(id uuid.UUID) *ImageinfoUpdate {
	iu.mutation.SetOwnerID(id)
	return iu
}

// SetOwner sets the "owner" edge to the User entity.
func (iu *ImageinfoUpdate) SetOwner(u *User) *ImageinfoUpdate {
	return iu.SetOwnerID(u.ID)
}

// Mutation returns the ImageinfoMutation object of the builder.
func (iu *ImageinfoUpdate) Mutation() *ImageinfoMutation {
	return iu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (iu *ImageinfoUpdate) ClearOwner() *ImageinfoUpdate {
	iu.mutation.ClearOwner()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ImageinfoUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks[int, ImageinfoMutation](ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ImageinfoUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ImageinfoUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ImageinfoUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *ImageinfoUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := imageinfo.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *ImageinfoUpdate) check() error {
	if v, ok := iu.mutation.ImgURL(); ok {
		if err := imageinfo.ImgURLValidator(v); err != nil {
			return &ValidationError{Name: "img_url", err: fmt.Errorf(`ent: validator failed for field "Imageinfo.img_url": %w`, err)}
		}
	}
	if v, ok := iu.mutation.ImgName(); ok {
		if err := imageinfo.ImgNameValidator(v); err != nil {
			return &ValidationError{Name: "img_name", err: fmt.Errorf(`ent: validator failed for field "Imageinfo.img_name": %w`, err)}
		}
	}
	if v, ok := iu.mutation.ImgSize(); ok {
		if err := imageinfo.ImgSizeValidator(v); err != nil {
			return &ValidationError{Name: "img_size", err: fmt.Errorf(`ent: validator failed for field "Imageinfo.img_size": %w`, err)}
		}
	}
	if v, ok := iu.mutation.ImgS3IDKey(); ok {
		if err := imageinfo.ImgS3IDKeyValidator(v); err != nil {
			return &ValidationError{Name: "img_s3_id_key", err: fmt.Errorf(`ent: validator failed for field "Imageinfo.img_s3_id_key": %w`, err)}
		}
	}
	if _, ok := iu.mutation.OwnerID(); iu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Imageinfo.owner"`)
	}
	return nil
}

func (iu *ImageinfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(imageinfo.Table, imageinfo.Columns, sqlgraph.NewFieldSpec(imageinfo.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(imageinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.ImgURL(); ok {
		_spec.SetField(imageinfo.FieldImgURL, field.TypeString, value)
	}
	if value, ok := iu.mutation.ImgName(); ok {
		_spec.SetField(imageinfo.FieldImgName, field.TypeString, value)
	}
	if value, ok := iu.mutation.ImgSize(); ok {
		_spec.SetField(imageinfo.FieldImgSize, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedImgSize(); ok {
		_spec.AddField(imageinfo.FieldImgSize, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.ImgS3IDKey(); ok {
		_spec.SetField(imageinfo.FieldImgS3IDKey, field.TypeString, value)
	}
	if iu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imageinfo.OwnerTable,
			Columns: []string{imageinfo.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imageinfo.OwnerTable,
			Columns: []string{imageinfo.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imageinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// ImageinfoUpdateOne is the builder for updating a single Imageinfo entity.
type ImageinfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageinfoMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *ImageinfoUpdateOne) SetUpdatedAt(t time.Time) *ImageinfoUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetUserID sets the "user_id" field.
func (iuo *ImageinfoUpdateOne) SetUserID(u uuid.UUID) *ImageinfoUpdateOne {
	iuo.mutation.SetUserID(u)
	return iuo
}

// SetImgURL sets the "img_url" field.
func (iuo *ImageinfoUpdateOne) SetImgURL(s string) *ImageinfoUpdateOne {
	iuo.mutation.SetImgURL(s)
	return iuo
}

// SetImgName sets the "img_name" field.
func (iuo *ImageinfoUpdateOne) SetImgName(s string) *ImageinfoUpdateOne {
	iuo.mutation.SetImgName(s)
	return iuo
}

// SetImgSize sets the "img_size" field.
func (iuo *ImageinfoUpdateOne) SetImgSize(i int64) *ImageinfoUpdateOne {
	iuo.mutation.ResetImgSize()
	iuo.mutation.SetImgSize(i)
	return iuo
}

// AddImgSize adds i to the "img_size" field.
func (iuo *ImageinfoUpdateOne) AddImgSize(i int64) *ImageinfoUpdateOne {
	iuo.mutation.AddImgSize(i)
	return iuo
}

// SetImgS3IDKey sets the "img_s3_id_key" field.
func (iuo *ImageinfoUpdateOne) SetImgS3IDKey(s string) *ImageinfoUpdateOne {
	iuo.mutation.SetImgS3IDKey(s)
	return iuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (iuo *ImageinfoUpdateOne) SetOwnerID(id uuid.UUID) *ImageinfoUpdateOne {
	iuo.mutation.SetOwnerID(id)
	return iuo
}

// SetOwner sets the "owner" edge to the User entity.
func (iuo *ImageinfoUpdateOne) SetOwner(u *User) *ImageinfoUpdateOne {
	return iuo.SetOwnerID(u.ID)
}

// Mutation returns the ImageinfoMutation object of the builder.
func (iuo *ImageinfoUpdateOne) Mutation() *ImageinfoMutation {
	return iuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (iuo *ImageinfoUpdateOne) ClearOwner() *ImageinfoUpdateOne {
	iuo.mutation.ClearOwner()
	return iuo
}

// Where appends a list predicates to the ImageinfoUpdate builder.
func (iuo *ImageinfoUpdateOne) Where(ps ...predicate.Imageinfo) *ImageinfoUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ImageinfoUpdateOne) Select(field string, fields ...string) *ImageinfoUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Imageinfo entity.
func (iuo *ImageinfoUpdateOne) Save(ctx context.Context) (*Imageinfo, error) {
	iuo.defaults()
	return withHooks[*Imageinfo, ImageinfoMutation](ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ImageinfoUpdateOne) SaveX(ctx context.Context) *Imageinfo {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ImageinfoUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ImageinfoUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *ImageinfoUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := imageinfo.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *ImageinfoUpdateOne) check() error {
	if v, ok := iuo.mutation.ImgURL(); ok {
		if err := imageinfo.ImgURLValidator(v); err != nil {
			return &ValidationError{Name: "img_url", err: fmt.Errorf(`ent: validator failed for field "Imageinfo.img_url": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.ImgName(); ok {
		if err := imageinfo.ImgNameValidator(v); err != nil {
			return &ValidationError{Name: "img_name", err: fmt.Errorf(`ent: validator failed for field "Imageinfo.img_name": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.ImgSize(); ok {
		if err := imageinfo.ImgSizeValidator(v); err != nil {
			return &ValidationError{Name: "img_size", err: fmt.Errorf(`ent: validator failed for field "Imageinfo.img_size": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.ImgS3IDKey(); ok {
		if err := imageinfo.ImgS3IDKeyValidator(v); err != nil {
			return &ValidationError{Name: "img_s3_id_key", err: fmt.Errorf(`ent: validator failed for field "Imageinfo.img_s3_id_key": %w`, err)}
		}
	}
	if _, ok := iuo.mutation.OwnerID(); iuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Imageinfo.owner"`)
	}
	return nil
}

func (iuo *ImageinfoUpdateOne) sqlSave(ctx context.Context) (_node *Imageinfo, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(imageinfo.Table, imageinfo.Columns, sqlgraph.NewFieldSpec(imageinfo.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Imageinfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imageinfo.FieldID)
		for _, f := range fields {
			if !imageinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != imageinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(imageinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.ImgURL(); ok {
		_spec.SetField(imageinfo.FieldImgURL, field.TypeString, value)
	}
	if value, ok := iuo.mutation.ImgName(); ok {
		_spec.SetField(imageinfo.FieldImgName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.ImgSize(); ok {
		_spec.SetField(imageinfo.FieldImgSize, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedImgSize(); ok {
		_spec.AddField(imageinfo.FieldImgSize, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.ImgS3IDKey(); ok {
		_spec.SetField(imageinfo.FieldImgS3IDKey, field.TypeString, value)
	}
	if iuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imageinfo.OwnerTable,
			Columns: []string{imageinfo.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imageinfo.OwnerTable,
			Columns: []string{imageinfo.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Imageinfo{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imageinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
