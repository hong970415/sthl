// Code generated by ent, DO NOT EDIT.

package order

import (
	"sthl/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUserID, v))
}

// Discount applies equality check predicate on the "discount" field. It's identical to DiscountEQ.
func Discount(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDiscount, v))
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTotalAmount, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldRemark, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// PaymentStatus applies equality check predicate on the "payment_status" field. It's identical to PaymentStatusEQ.
func PaymentStatus(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPaymentStatus, v))
}

// PaymentMethod applies equality check predicate on the "payment_method" field. It's identical to PaymentMethodEQ.
func PaymentMethod(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPaymentMethod, v))
}

// DeliveryStatus applies equality check predicate on the "delivery_status" field. It's identical to DeliveryStatusEQ.
func DeliveryStatus(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDeliveryStatus, v))
}

// ShippingAddress applies equality check predicate on the "shipping_address" field. It's identical to ShippingAddressEQ.
func ShippingAddress(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldShippingAddress, v))
}

// TrackingNumber applies equality check predicate on the "tracking_number" field. It's identical to TrackingNumberEQ.
func TrackingNumber(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTrackingNumber, v))
}

// IsArchived applies equality check predicate on the "is_archived" field. It's identical to IsArchivedEQ.
func IsArchived(v bool) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldIsArchived, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUserID, vs...))
}

// DiscountEQ applies the EQ predicate on the "discount" field.
func DiscountEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDiscount, v))
}

// DiscountNEQ applies the NEQ predicate on the "discount" field.
func DiscountNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldDiscount, v))
}

// DiscountIn applies the In predicate on the "discount" field.
func DiscountIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldDiscount, vs...))
}

// DiscountNotIn applies the NotIn predicate on the "discount" field.
func DiscountNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldDiscount, vs...))
}

// DiscountGT applies the GT predicate on the "discount" field.
func DiscountGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldDiscount, v))
}

// DiscountGTE applies the GTE predicate on the "discount" field.
func DiscountGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldDiscount, v))
}

// DiscountLT applies the LT predicate on the "discount" field.
func DiscountLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldDiscount, v))
}

// DiscountLTE applies the LTE predicate on the "discount" field.
func DiscountLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldDiscount, v))
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTotalAmount, v))
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTotalAmount, vs...))
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTotalAmount, vs...))
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTotalAmount, v))
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTotalAmount, v))
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTotalAmount, v))
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTotalAmount, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldRemark, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldStatus, v))
}

// PaymentStatusEQ applies the EQ predicate on the "payment_status" field.
func PaymentStatusEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPaymentStatus, v))
}

// PaymentStatusNEQ applies the NEQ predicate on the "payment_status" field.
func PaymentStatusNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldPaymentStatus, v))
}

// PaymentStatusIn applies the In predicate on the "payment_status" field.
func PaymentStatusIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldPaymentStatus, vs...))
}

// PaymentStatusNotIn applies the NotIn predicate on the "payment_status" field.
func PaymentStatusNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldPaymentStatus, vs...))
}

// PaymentStatusGT applies the GT predicate on the "payment_status" field.
func PaymentStatusGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldPaymentStatus, v))
}

// PaymentStatusGTE applies the GTE predicate on the "payment_status" field.
func PaymentStatusGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldPaymentStatus, v))
}

// PaymentStatusLT applies the LT predicate on the "payment_status" field.
func PaymentStatusLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldPaymentStatus, v))
}

// PaymentStatusLTE applies the LTE predicate on the "payment_status" field.
func PaymentStatusLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldPaymentStatus, v))
}

// PaymentStatusContains applies the Contains predicate on the "payment_status" field.
func PaymentStatusContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldPaymentStatus, v))
}

// PaymentStatusHasPrefix applies the HasPrefix predicate on the "payment_status" field.
func PaymentStatusHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldPaymentStatus, v))
}

// PaymentStatusHasSuffix applies the HasSuffix predicate on the "payment_status" field.
func PaymentStatusHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldPaymentStatus, v))
}

// PaymentStatusEqualFold applies the EqualFold predicate on the "payment_status" field.
func PaymentStatusEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldPaymentStatus, v))
}

// PaymentStatusContainsFold applies the ContainsFold predicate on the "payment_status" field.
func PaymentStatusContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldPaymentStatus, v))
}

// PaymentMethodEQ applies the EQ predicate on the "payment_method" field.
func PaymentMethodEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPaymentMethod, v))
}

// PaymentMethodNEQ applies the NEQ predicate on the "payment_method" field.
func PaymentMethodNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldPaymentMethod, v))
}

// PaymentMethodIn applies the In predicate on the "payment_method" field.
func PaymentMethodIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldPaymentMethod, vs...))
}

// PaymentMethodNotIn applies the NotIn predicate on the "payment_method" field.
func PaymentMethodNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldPaymentMethod, vs...))
}

// PaymentMethodGT applies the GT predicate on the "payment_method" field.
func PaymentMethodGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldPaymentMethod, v))
}

// PaymentMethodGTE applies the GTE predicate on the "payment_method" field.
func PaymentMethodGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldPaymentMethod, v))
}

// PaymentMethodLT applies the LT predicate on the "payment_method" field.
func PaymentMethodLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldPaymentMethod, v))
}

// PaymentMethodLTE applies the LTE predicate on the "payment_method" field.
func PaymentMethodLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldPaymentMethod, v))
}

// PaymentMethodContains applies the Contains predicate on the "payment_method" field.
func PaymentMethodContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldPaymentMethod, v))
}

// PaymentMethodHasPrefix applies the HasPrefix predicate on the "payment_method" field.
func PaymentMethodHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldPaymentMethod, v))
}

// PaymentMethodHasSuffix applies the HasSuffix predicate on the "payment_method" field.
func PaymentMethodHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldPaymentMethod, v))
}

// PaymentMethodEqualFold applies the EqualFold predicate on the "payment_method" field.
func PaymentMethodEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldPaymentMethod, v))
}

// PaymentMethodContainsFold applies the ContainsFold predicate on the "payment_method" field.
func PaymentMethodContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldPaymentMethod, v))
}

// DeliveryStatusEQ applies the EQ predicate on the "delivery_status" field.
func DeliveryStatusEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDeliveryStatus, v))
}

// DeliveryStatusNEQ applies the NEQ predicate on the "delivery_status" field.
func DeliveryStatusNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldDeliveryStatus, v))
}

// DeliveryStatusIn applies the In predicate on the "delivery_status" field.
func DeliveryStatusIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldDeliveryStatus, vs...))
}

// DeliveryStatusNotIn applies the NotIn predicate on the "delivery_status" field.
func DeliveryStatusNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldDeliveryStatus, vs...))
}

// DeliveryStatusGT applies the GT predicate on the "delivery_status" field.
func DeliveryStatusGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldDeliveryStatus, v))
}

// DeliveryStatusGTE applies the GTE predicate on the "delivery_status" field.
func DeliveryStatusGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldDeliveryStatus, v))
}

// DeliveryStatusLT applies the LT predicate on the "delivery_status" field.
func DeliveryStatusLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldDeliveryStatus, v))
}

// DeliveryStatusLTE applies the LTE predicate on the "delivery_status" field.
func DeliveryStatusLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldDeliveryStatus, v))
}

// DeliveryStatusContains applies the Contains predicate on the "delivery_status" field.
func DeliveryStatusContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldDeliveryStatus, v))
}

// DeliveryStatusHasPrefix applies the HasPrefix predicate on the "delivery_status" field.
func DeliveryStatusHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldDeliveryStatus, v))
}

// DeliveryStatusHasSuffix applies the HasSuffix predicate on the "delivery_status" field.
func DeliveryStatusHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldDeliveryStatus, v))
}

// DeliveryStatusEqualFold applies the EqualFold predicate on the "delivery_status" field.
func DeliveryStatusEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldDeliveryStatus, v))
}

// DeliveryStatusContainsFold applies the ContainsFold predicate on the "delivery_status" field.
func DeliveryStatusContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldDeliveryStatus, v))
}

// ShippingAddressEQ applies the EQ predicate on the "shipping_address" field.
func ShippingAddressEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldShippingAddress, v))
}

// ShippingAddressNEQ applies the NEQ predicate on the "shipping_address" field.
func ShippingAddressNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldShippingAddress, v))
}

// ShippingAddressIn applies the In predicate on the "shipping_address" field.
func ShippingAddressIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldShippingAddress, vs...))
}

// ShippingAddressNotIn applies the NotIn predicate on the "shipping_address" field.
func ShippingAddressNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldShippingAddress, vs...))
}

// ShippingAddressGT applies the GT predicate on the "shipping_address" field.
func ShippingAddressGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldShippingAddress, v))
}

// ShippingAddressGTE applies the GTE predicate on the "shipping_address" field.
func ShippingAddressGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldShippingAddress, v))
}

// ShippingAddressLT applies the LT predicate on the "shipping_address" field.
func ShippingAddressLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldShippingAddress, v))
}

// ShippingAddressLTE applies the LTE predicate on the "shipping_address" field.
func ShippingAddressLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldShippingAddress, v))
}

// ShippingAddressContains applies the Contains predicate on the "shipping_address" field.
func ShippingAddressContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldShippingAddress, v))
}

// ShippingAddressHasPrefix applies the HasPrefix predicate on the "shipping_address" field.
func ShippingAddressHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldShippingAddress, v))
}

// ShippingAddressHasSuffix applies the HasSuffix predicate on the "shipping_address" field.
func ShippingAddressHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldShippingAddress, v))
}

// ShippingAddressEqualFold applies the EqualFold predicate on the "shipping_address" field.
func ShippingAddressEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldShippingAddress, v))
}

// ShippingAddressContainsFold applies the ContainsFold predicate on the "shipping_address" field.
func ShippingAddressContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldShippingAddress, v))
}

// TrackingNumberEQ applies the EQ predicate on the "tracking_number" field.
func TrackingNumberEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTrackingNumber, v))
}

// TrackingNumberNEQ applies the NEQ predicate on the "tracking_number" field.
func TrackingNumberNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTrackingNumber, v))
}

// TrackingNumberIn applies the In predicate on the "tracking_number" field.
func TrackingNumberIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTrackingNumber, vs...))
}

// TrackingNumberNotIn applies the NotIn predicate on the "tracking_number" field.
func TrackingNumberNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTrackingNumber, vs...))
}

// TrackingNumberGT applies the GT predicate on the "tracking_number" field.
func TrackingNumberGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTrackingNumber, v))
}

// TrackingNumberGTE applies the GTE predicate on the "tracking_number" field.
func TrackingNumberGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTrackingNumber, v))
}

// TrackingNumberLT applies the LT predicate on the "tracking_number" field.
func TrackingNumberLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTrackingNumber, v))
}

// TrackingNumberLTE applies the LTE predicate on the "tracking_number" field.
func TrackingNumberLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTrackingNumber, v))
}

// TrackingNumberContains applies the Contains predicate on the "tracking_number" field.
func TrackingNumberContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldTrackingNumber, v))
}

// TrackingNumberHasPrefix applies the HasPrefix predicate on the "tracking_number" field.
func TrackingNumberHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldTrackingNumber, v))
}

// TrackingNumberHasSuffix applies the HasSuffix predicate on the "tracking_number" field.
func TrackingNumberHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldTrackingNumber, v))
}

// TrackingNumberEqualFold applies the EqualFold predicate on the "tracking_number" field.
func TrackingNumberEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldTrackingNumber, v))
}

// TrackingNumberContainsFold applies the ContainsFold predicate on the "tracking_number" field.
func TrackingNumberContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldTrackingNumber, v))
}

// IsArchivedEQ applies the EQ predicate on the "is_archived" field.
func IsArchivedEQ(v bool) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldIsArchived, v))
}

// IsArchivedNEQ applies the NEQ predicate on the "is_archived" field.
func IsArchivedNEQ(v bool) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldIsArchived, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderitems applies the HasEdge predicate on the "orderitems" edge.
func HasOrderitems() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderitemsTable, OrderitemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderitemsWith applies the HasEdge predicate on the "orderitems" edge with a given conditions (other predicates).
func HasOrderitemsWith(preds ...predicate.OrderItem) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderitemsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderitemsTable, OrderitemsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		p(s.Not())
	})
}
