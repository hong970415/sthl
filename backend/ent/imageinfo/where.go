// Code generated by ent, DO NOT EDIT.

package imageinfo

import (
	"sthl/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEQ(FieldUserID, v))
}

// ImgURL applies equality check predicate on the "img_url" field. It's identical to ImgURLEQ.
func ImgURL(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEQ(FieldImgURL, v))
}

// ImgName applies equality check predicate on the "img_name" field. It's identical to ImgNameEQ.
func ImgName(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEQ(FieldImgName, v))
}

// ImgSize applies equality check predicate on the "img_size" field. It's identical to ImgSizeEQ.
func ImgSize(v int64) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEQ(FieldImgSize, v))
}

// ImgS3IDKey applies equality check predicate on the "img_s3_id_key" field. It's identical to ImgS3IDKeyEQ.
func ImgS3IDKey(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEQ(FieldImgS3IDKey, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldNotIn(FieldUserID, vs...))
}

// ImgURLEQ applies the EQ predicate on the "img_url" field.
func ImgURLEQ(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEQ(FieldImgURL, v))
}

// ImgURLNEQ applies the NEQ predicate on the "img_url" field.
func ImgURLNEQ(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldNEQ(FieldImgURL, v))
}

// ImgURLIn applies the In predicate on the "img_url" field.
func ImgURLIn(vs ...string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldIn(FieldImgURL, vs...))
}

// ImgURLNotIn applies the NotIn predicate on the "img_url" field.
func ImgURLNotIn(vs ...string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldNotIn(FieldImgURL, vs...))
}

// ImgURLGT applies the GT predicate on the "img_url" field.
func ImgURLGT(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldGT(FieldImgURL, v))
}

// ImgURLGTE applies the GTE predicate on the "img_url" field.
func ImgURLGTE(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldGTE(FieldImgURL, v))
}

// ImgURLLT applies the LT predicate on the "img_url" field.
func ImgURLLT(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldLT(FieldImgURL, v))
}

// ImgURLLTE applies the LTE predicate on the "img_url" field.
func ImgURLLTE(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldLTE(FieldImgURL, v))
}

// ImgURLContains applies the Contains predicate on the "img_url" field.
func ImgURLContains(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldContains(FieldImgURL, v))
}

// ImgURLHasPrefix applies the HasPrefix predicate on the "img_url" field.
func ImgURLHasPrefix(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldHasPrefix(FieldImgURL, v))
}

// ImgURLHasSuffix applies the HasSuffix predicate on the "img_url" field.
func ImgURLHasSuffix(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldHasSuffix(FieldImgURL, v))
}

// ImgURLEqualFold applies the EqualFold predicate on the "img_url" field.
func ImgURLEqualFold(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEqualFold(FieldImgURL, v))
}

// ImgURLContainsFold applies the ContainsFold predicate on the "img_url" field.
func ImgURLContainsFold(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldContainsFold(FieldImgURL, v))
}

// ImgNameEQ applies the EQ predicate on the "img_name" field.
func ImgNameEQ(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEQ(FieldImgName, v))
}

// ImgNameNEQ applies the NEQ predicate on the "img_name" field.
func ImgNameNEQ(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldNEQ(FieldImgName, v))
}

// ImgNameIn applies the In predicate on the "img_name" field.
func ImgNameIn(vs ...string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldIn(FieldImgName, vs...))
}

// ImgNameNotIn applies the NotIn predicate on the "img_name" field.
func ImgNameNotIn(vs ...string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldNotIn(FieldImgName, vs...))
}

// ImgNameGT applies the GT predicate on the "img_name" field.
func ImgNameGT(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldGT(FieldImgName, v))
}

// ImgNameGTE applies the GTE predicate on the "img_name" field.
func ImgNameGTE(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldGTE(FieldImgName, v))
}

// ImgNameLT applies the LT predicate on the "img_name" field.
func ImgNameLT(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldLT(FieldImgName, v))
}

// ImgNameLTE applies the LTE predicate on the "img_name" field.
func ImgNameLTE(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldLTE(FieldImgName, v))
}

// ImgNameContains applies the Contains predicate on the "img_name" field.
func ImgNameContains(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldContains(FieldImgName, v))
}

// ImgNameHasPrefix applies the HasPrefix predicate on the "img_name" field.
func ImgNameHasPrefix(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldHasPrefix(FieldImgName, v))
}

// ImgNameHasSuffix applies the HasSuffix predicate on the "img_name" field.
func ImgNameHasSuffix(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldHasSuffix(FieldImgName, v))
}

// ImgNameEqualFold applies the EqualFold predicate on the "img_name" field.
func ImgNameEqualFold(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEqualFold(FieldImgName, v))
}

// ImgNameContainsFold applies the ContainsFold predicate on the "img_name" field.
func ImgNameContainsFold(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldContainsFold(FieldImgName, v))
}

// ImgSizeEQ applies the EQ predicate on the "img_size" field.
func ImgSizeEQ(v int64) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEQ(FieldImgSize, v))
}

// ImgSizeNEQ applies the NEQ predicate on the "img_size" field.
func ImgSizeNEQ(v int64) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldNEQ(FieldImgSize, v))
}

// ImgSizeIn applies the In predicate on the "img_size" field.
func ImgSizeIn(vs ...int64) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldIn(FieldImgSize, vs...))
}

// ImgSizeNotIn applies the NotIn predicate on the "img_size" field.
func ImgSizeNotIn(vs ...int64) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldNotIn(FieldImgSize, vs...))
}

// ImgSizeGT applies the GT predicate on the "img_size" field.
func ImgSizeGT(v int64) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldGT(FieldImgSize, v))
}

// ImgSizeGTE applies the GTE predicate on the "img_size" field.
func ImgSizeGTE(v int64) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldGTE(FieldImgSize, v))
}

// ImgSizeLT applies the LT predicate on the "img_size" field.
func ImgSizeLT(v int64) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldLT(FieldImgSize, v))
}

// ImgSizeLTE applies the LTE predicate on the "img_size" field.
func ImgSizeLTE(v int64) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldLTE(FieldImgSize, v))
}

// ImgS3IDKeyEQ applies the EQ predicate on the "img_s3_id_key" field.
func ImgS3IDKeyEQ(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEQ(FieldImgS3IDKey, v))
}

// ImgS3IDKeyNEQ applies the NEQ predicate on the "img_s3_id_key" field.
func ImgS3IDKeyNEQ(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldNEQ(FieldImgS3IDKey, v))
}

// ImgS3IDKeyIn applies the In predicate on the "img_s3_id_key" field.
func ImgS3IDKeyIn(vs ...string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldIn(FieldImgS3IDKey, vs...))
}

// ImgS3IDKeyNotIn applies the NotIn predicate on the "img_s3_id_key" field.
func ImgS3IDKeyNotIn(vs ...string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldNotIn(FieldImgS3IDKey, vs...))
}

// ImgS3IDKeyGT applies the GT predicate on the "img_s3_id_key" field.
func ImgS3IDKeyGT(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldGT(FieldImgS3IDKey, v))
}

// ImgS3IDKeyGTE applies the GTE predicate on the "img_s3_id_key" field.
func ImgS3IDKeyGTE(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldGTE(FieldImgS3IDKey, v))
}

// ImgS3IDKeyLT applies the LT predicate on the "img_s3_id_key" field.
func ImgS3IDKeyLT(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldLT(FieldImgS3IDKey, v))
}

// ImgS3IDKeyLTE applies the LTE predicate on the "img_s3_id_key" field.
func ImgS3IDKeyLTE(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldLTE(FieldImgS3IDKey, v))
}

// ImgS3IDKeyContains applies the Contains predicate on the "img_s3_id_key" field.
func ImgS3IDKeyContains(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldContains(FieldImgS3IDKey, v))
}

// ImgS3IDKeyHasPrefix applies the HasPrefix predicate on the "img_s3_id_key" field.
func ImgS3IDKeyHasPrefix(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldHasPrefix(FieldImgS3IDKey, v))
}

// ImgS3IDKeyHasSuffix applies the HasSuffix predicate on the "img_s3_id_key" field.
func ImgS3IDKeyHasSuffix(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldHasSuffix(FieldImgS3IDKey, v))
}

// ImgS3IDKeyEqualFold applies the EqualFold predicate on the "img_s3_id_key" field.
func ImgS3IDKeyEqualFold(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldEqualFold(FieldImgS3IDKey, v))
}

// ImgS3IDKeyContainsFold applies the ContainsFold predicate on the "img_s3_id_key" field.
func ImgS3IDKeyContainsFold(v string) predicate.Imageinfo {
	return predicate.Imageinfo(sql.FieldContainsFold(FieldImgS3IDKey, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Imageinfo {
	return predicate.Imageinfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Imageinfo {
	return predicate.Imageinfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Imageinfo) predicate.Imageinfo {
	return predicate.Imageinfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Imageinfo) predicate.Imageinfo {
	return predicate.Imageinfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Imageinfo) predicate.Imageinfo {
	return predicate.Imageinfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
