// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sthl/ent/order"
	"sthl/ent/orderitem"
	"sthl/ent/predicate"
	"sthl/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetUserID sets the "user_id" field.
func (ou *OrderUpdate) SetUserID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetUserID(u)
	return ou
}

// SetDiscount sets the "discount" field.
func (ou *OrderUpdate) SetDiscount(f float64) *OrderUpdate {
	ou.mutation.ResetDiscount()
	ou.mutation.SetDiscount(f)
	return ou
}

// AddDiscount adds f to the "discount" field.
func (ou *OrderUpdate) AddDiscount(f float64) *OrderUpdate {
	ou.mutation.AddDiscount(f)
	return ou
}

// SetTotalAmount sets the "total_amount" field.
func (ou *OrderUpdate) SetTotalAmount(f float64) *OrderUpdate {
	ou.mutation.ResetTotalAmount()
	ou.mutation.SetTotalAmount(f)
	return ou
}

// AddTotalAmount adds f to the "total_amount" field.
func (ou *OrderUpdate) AddTotalAmount(f float64) *OrderUpdate {
	ou.mutation.AddTotalAmount(f)
	return ou
}

// SetRemark sets the "remark" field.
func (ou *OrderUpdate) SetRemark(s string) *OrderUpdate {
	ou.mutation.SetRemark(s)
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(s string) *OrderUpdate {
	ou.mutation.SetStatus(s)
	return ou
}

// SetPaymentStatus sets the "payment_status" field.
func (ou *OrderUpdate) SetPaymentStatus(s string) *OrderUpdate {
	ou.mutation.SetPaymentStatus(s)
	return ou
}

// SetPaymentMethod sets the "payment_method" field.
func (ou *OrderUpdate) SetPaymentMethod(s string) *OrderUpdate {
	ou.mutation.SetPaymentMethod(s)
	return ou
}

// SetDeliveryStatus sets the "delivery_status" field.
func (ou *OrderUpdate) SetDeliveryStatus(s string) *OrderUpdate {
	ou.mutation.SetDeliveryStatus(s)
	return ou
}

// SetShippingAddress sets the "shipping_address" field.
func (ou *OrderUpdate) SetShippingAddress(s string) *OrderUpdate {
	ou.mutation.SetShippingAddress(s)
	return ou
}

// SetTrackingNumber sets the "tracking_number" field.
func (ou *OrderUpdate) SetTrackingNumber(s string) *OrderUpdate {
	ou.mutation.SetTrackingNumber(s)
	return ou
}

// SetIsArchived sets the "is_archived" field.
func (ou *OrderUpdate) SetIsArchived(b bool) *OrderUpdate {
	ou.mutation.SetIsArchived(b)
	return ou
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableIsArchived(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetIsArchived(*b)
	}
	return ou
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ou *OrderUpdate) SetOwnerID(id uuid.UUID) *OrderUpdate {
	ou.mutation.SetOwnerID(id)
	return ou
}

// SetOwner sets the "owner" edge to the User entity.
func (ou *OrderUpdate) SetOwner(u *User) *OrderUpdate {
	return ou.SetOwnerID(u.ID)
}

// AddOrderitemIDs adds the "orderitems" edge to the OrderItem entity by IDs.
func (ou *OrderUpdate) AddOrderitemIDs(ids ...uuid.UUID) *OrderUpdate {
	ou.mutation.AddOrderitemIDs(ids...)
	return ou
}

// AddOrderitems adds the "orderitems" edges to the OrderItem entity.
func (ou *OrderUpdate) AddOrderitems(o ...*OrderItem) *OrderUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOrderitemIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ou *OrderUpdate) ClearOwner() *OrderUpdate {
	ou.mutation.ClearOwner()
	return ou
}

// ClearOrderitems clears all "orderitems" edges to the OrderItem entity.
func (ou *OrderUpdate) ClearOrderitems() *OrderUpdate {
	ou.mutation.ClearOrderitems()
	return ou
}

// RemoveOrderitemIDs removes the "orderitems" edge to OrderItem entities by IDs.
func (ou *OrderUpdate) RemoveOrderitemIDs(ids ...uuid.UUID) *OrderUpdate {
	ou.mutation.RemoveOrderitemIDs(ids...)
	return ou
}

// RemoveOrderitems removes "orderitems" edges to OrderItem entities.
func (ou *OrderUpdate) RemoveOrderitems(o ...*OrderItem) *OrderUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOrderitemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks[int, OrderMutation](ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.Discount(); ok {
		if err := order.DiscountValidator(v); err != nil {
			return &ValidationError{Name: "discount", err: fmt.Errorf(`ent: validator failed for field "Order.discount": %w`, err)}
		}
	}
	if v, ok := ou.mutation.TotalAmount(); ok {
		if err := order.TotalAmountValidator(v); err != nil {
			return &ValidationError{Name: "total_amount", err: fmt.Errorf(`ent: validator failed for field "Order.total_amount": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Remark(); ok {
		if err := order.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: validator failed for field "Order.remark": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if v, ok := ou.mutation.PaymentStatus(); ok {
		if err := order.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "Order.payment_status": %w`, err)}
		}
	}
	if v, ok := ou.mutation.PaymentMethod(); ok {
		if err := order.PaymentMethodValidator(v); err != nil {
			return &ValidationError{Name: "payment_method", err: fmt.Errorf(`ent: validator failed for field "Order.payment_method": %w`, err)}
		}
	}
	if v, ok := ou.mutation.DeliveryStatus(); ok {
		if err := order.DeliveryStatusValidator(v); err != nil {
			return &ValidationError{Name: "delivery_status", err: fmt.Errorf(`ent: validator failed for field "Order.delivery_status": %w`, err)}
		}
	}
	if v, ok := ou.mutation.ShippingAddress(); ok {
		if err := order.ShippingAddressValidator(v); err != nil {
			return &ValidationError{Name: "shipping_address", err: fmt.Errorf(`ent: validator failed for field "Order.shipping_address": %w`, err)}
		}
	}
	if v, ok := ou.mutation.TrackingNumber(); ok {
		if err := order.TrackingNumberValidator(v); err != nil {
			return &ValidationError{Name: "tracking_number", err: fmt.Errorf(`ent: validator failed for field "Order.tracking_number": %w`, err)}
		}
	}
	if _, ok := ou.mutation.OwnerID(); ou.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.owner"`)
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.Discount(); ok {
		_spec.SetField(order.FieldDiscount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedDiscount(); ok {
		_spec.AddField(order.FieldDiscount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.TotalAmount(); ok {
		_spec.SetField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedTotalAmount(); ok {
		_spec.AddField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.Remark(); ok {
		_spec.SetField(order.FieldRemark, field.TypeString, value)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeString, value)
	}
	if value, ok := ou.mutation.PaymentStatus(); ok {
		_spec.SetField(order.FieldPaymentStatus, field.TypeString, value)
	}
	if value, ok := ou.mutation.PaymentMethod(); ok {
		_spec.SetField(order.FieldPaymentMethod, field.TypeString, value)
	}
	if value, ok := ou.mutation.DeliveryStatus(); ok {
		_spec.SetField(order.FieldDeliveryStatus, field.TypeString, value)
	}
	if value, ok := ou.mutation.ShippingAddress(); ok {
		_spec.SetField(order.FieldShippingAddress, field.TypeString, value)
	}
	if value, ok := ou.mutation.TrackingNumber(); ok {
		_spec.SetField(order.FieldTrackingNumber, field.TypeString, value)
	}
	if value, ok := ou.mutation.IsArchived(); ok {
		_spec.SetField(order.FieldIsArchived, field.TypeBool, value)
	}
	if ou.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OwnerTable,
			Columns: []string{order.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OwnerTable,
			Columns: []string{order.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderitemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderitemsTable,
			Columns: []string{order.OrderitemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOrderitemsIDs(); len(nodes) > 0 && !ou.mutation.OrderitemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderitemsTable,
			Columns: []string{order.OrderitemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderitemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderitemsTable,
			Columns: []string{order.OrderitemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetUserID sets the "user_id" field.
func (ouo *OrderUpdateOne) SetUserID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetUserID(u)
	return ouo
}

// SetDiscount sets the "discount" field.
func (ouo *OrderUpdateOne) SetDiscount(f float64) *OrderUpdateOne {
	ouo.mutation.ResetDiscount()
	ouo.mutation.SetDiscount(f)
	return ouo
}

// AddDiscount adds f to the "discount" field.
func (ouo *OrderUpdateOne) AddDiscount(f float64) *OrderUpdateOne {
	ouo.mutation.AddDiscount(f)
	return ouo
}

// SetTotalAmount sets the "total_amount" field.
func (ouo *OrderUpdateOne) SetTotalAmount(f float64) *OrderUpdateOne {
	ouo.mutation.ResetTotalAmount()
	ouo.mutation.SetTotalAmount(f)
	return ouo
}

// AddTotalAmount adds f to the "total_amount" field.
func (ouo *OrderUpdateOne) AddTotalAmount(f float64) *OrderUpdateOne {
	ouo.mutation.AddTotalAmount(f)
	return ouo
}

// SetRemark sets the "remark" field.
func (ouo *OrderUpdateOne) SetRemark(s string) *OrderUpdateOne {
	ouo.mutation.SetRemark(s)
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(s string) *OrderUpdateOne {
	ouo.mutation.SetStatus(s)
	return ouo
}

// SetPaymentStatus sets the "payment_status" field.
func (ouo *OrderUpdateOne) SetPaymentStatus(s string) *OrderUpdateOne {
	ouo.mutation.SetPaymentStatus(s)
	return ouo
}

// SetPaymentMethod sets the "payment_method" field.
func (ouo *OrderUpdateOne) SetPaymentMethod(s string) *OrderUpdateOne {
	ouo.mutation.SetPaymentMethod(s)
	return ouo
}

// SetDeliveryStatus sets the "delivery_status" field.
func (ouo *OrderUpdateOne) SetDeliveryStatus(s string) *OrderUpdateOne {
	ouo.mutation.SetDeliveryStatus(s)
	return ouo
}

// SetShippingAddress sets the "shipping_address" field.
func (ouo *OrderUpdateOne) SetShippingAddress(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingAddress(s)
	return ouo
}

// SetTrackingNumber sets the "tracking_number" field.
func (ouo *OrderUpdateOne) SetTrackingNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetTrackingNumber(s)
	return ouo
}

// SetIsArchived sets the "is_archived" field.
func (ouo *OrderUpdateOne) SetIsArchived(b bool) *OrderUpdateOne {
	ouo.mutation.SetIsArchived(b)
	return ouo
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableIsArchived(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetIsArchived(*b)
	}
	return ouo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ouo *OrderUpdateOne) SetOwnerID(id uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetOwnerID(id)
	return ouo
}

// SetOwner sets the "owner" edge to the User entity.
func (ouo *OrderUpdateOne) SetOwner(u *User) *OrderUpdateOne {
	return ouo.SetOwnerID(u.ID)
}

// AddOrderitemIDs adds the "orderitems" edge to the OrderItem entity by IDs.
func (ouo *OrderUpdateOne) AddOrderitemIDs(ids ...uuid.UUID) *OrderUpdateOne {
	ouo.mutation.AddOrderitemIDs(ids...)
	return ouo
}

// AddOrderitems adds the "orderitems" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) AddOrderitems(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOrderitemIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ouo *OrderUpdateOne) ClearOwner() *OrderUpdateOne {
	ouo.mutation.ClearOwner()
	return ouo
}

// ClearOrderitems clears all "orderitems" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) ClearOrderitems() *OrderUpdateOne {
	ouo.mutation.ClearOrderitems()
	return ouo
}

// RemoveOrderitemIDs removes the "orderitems" edge to OrderItem entities by IDs.
func (ouo *OrderUpdateOne) RemoveOrderitemIDs(ids ...uuid.UUID) *OrderUpdateOne {
	ouo.mutation.RemoveOrderitemIDs(ids...)
	return ouo
}

// RemoveOrderitems removes "orderitems" edges to OrderItem entities.
func (ouo *OrderUpdateOne) RemoveOrderitems(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOrderitemIDs(ids...)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks[*Order, OrderMutation](ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.Discount(); ok {
		if err := order.DiscountValidator(v); err != nil {
			return &ValidationError{Name: "discount", err: fmt.Errorf(`ent: validator failed for field "Order.discount": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.TotalAmount(); ok {
		if err := order.TotalAmountValidator(v); err != nil {
			return &ValidationError{Name: "total_amount", err: fmt.Errorf(`ent: validator failed for field "Order.total_amount": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Remark(); ok {
		if err := order.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: validator failed for field "Order.remark": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.PaymentStatus(); ok {
		if err := order.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "Order.payment_status": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.PaymentMethod(); ok {
		if err := order.PaymentMethodValidator(v); err != nil {
			return &ValidationError{Name: "payment_method", err: fmt.Errorf(`ent: validator failed for field "Order.payment_method": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.DeliveryStatus(); ok {
		if err := order.DeliveryStatusValidator(v); err != nil {
			return &ValidationError{Name: "delivery_status", err: fmt.Errorf(`ent: validator failed for field "Order.delivery_status": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.ShippingAddress(); ok {
		if err := order.ShippingAddressValidator(v); err != nil {
			return &ValidationError{Name: "shipping_address", err: fmt.Errorf(`ent: validator failed for field "Order.shipping_address": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.TrackingNumber(); ok {
		if err := order.TrackingNumberValidator(v); err != nil {
			return &ValidationError{Name: "tracking_number", err: fmt.Errorf(`ent: validator failed for field "Order.tracking_number": %w`, err)}
		}
	}
	if _, ok := ouo.mutation.OwnerID(); ouo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.owner"`)
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.Discount(); ok {
		_spec.SetField(order.FieldDiscount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedDiscount(); ok {
		_spec.AddField(order.FieldDiscount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.TotalAmount(); ok {
		_spec.SetField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedTotalAmount(); ok {
		_spec.AddField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.Remark(); ok {
		_spec.SetField(order.FieldRemark, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeString, value)
	}
	if value, ok := ouo.mutation.PaymentStatus(); ok {
		_spec.SetField(order.FieldPaymentStatus, field.TypeString, value)
	}
	if value, ok := ouo.mutation.PaymentMethod(); ok {
		_spec.SetField(order.FieldPaymentMethod, field.TypeString, value)
	}
	if value, ok := ouo.mutation.DeliveryStatus(); ok {
		_spec.SetField(order.FieldDeliveryStatus, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ShippingAddress(); ok {
		_spec.SetField(order.FieldShippingAddress, field.TypeString, value)
	}
	if value, ok := ouo.mutation.TrackingNumber(); ok {
		_spec.SetField(order.FieldTrackingNumber, field.TypeString, value)
	}
	if value, ok := ouo.mutation.IsArchived(); ok {
		_spec.SetField(order.FieldIsArchived, field.TypeBool, value)
	}
	if ouo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OwnerTable,
			Columns: []string{order.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OwnerTable,
			Columns: []string{order.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderitemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderitemsTable,
			Columns: []string{order.OrderitemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOrderitemsIDs(); len(nodes) > 0 && !ouo.mutation.OrderitemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderitemsTable,
			Columns: []string{order.OrderitemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderitemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderitemsTable,
			Columns: []string{order.OrderitemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
