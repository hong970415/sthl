// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sthl/ent/siteui"
	"sthl/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SiteuiCreate is the builder for creating a Siteui entity.
type SiteuiCreate struct {
	config
	mutation *SiteuiMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *SiteuiCreate) SetCreatedAt(t time.Time) *SiteuiCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SiteuiCreate) SetNillableCreatedAt(t *time.Time) *SiteuiCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SiteuiCreate) SetUpdatedAt(t time.Time) *SiteuiCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SiteuiCreate) SetNillableUpdatedAt(t *time.Time) *SiteuiCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetUserID sets the "user_id" field.
func (sc *SiteuiCreate) SetUserID(u uuid.UUID) *SiteuiCreate {
	sc.mutation.SetUserID(u)
	return sc
}

// SetSitename sets the "sitename" field.
func (sc *SiteuiCreate) SetSitename(s string) *SiteuiCreate {
	sc.mutation.SetSitename(s)
	return sc
}

// SetHomepageImgUrl sets the "homepageImgUrl" field.
func (sc *SiteuiCreate) SetHomepageImgUrl(s string) *SiteuiCreate {
	sc.mutation.SetHomepageImgUrl(s)
	return sc
}

// SetNillableHomepageImgUrl sets the "homepageImgUrl" field if the given value is not nil.
func (sc *SiteuiCreate) SetNillableHomepageImgUrl(s *string) *SiteuiCreate {
	if s != nil {
		sc.SetHomepageImgUrl(*s)
	}
	return sc
}

// SetHomepageText sets the "homepageText" field.
func (sc *SiteuiCreate) SetHomepageText(s string) *SiteuiCreate {
	sc.mutation.SetHomepageText(s)
	return sc
}

// SetHomepageTextColor sets the "homepageTextColor" field.
func (sc *SiteuiCreate) SetHomepageTextColor(s string) *SiteuiCreate {
	sc.mutation.SetHomepageTextColor(s)
	return sc
}

// SetID sets the "id" field.
func (sc *SiteuiCreate) SetID(u uuid.UUID) *SiteuiCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SiteuiCreate) SetNillableID(u *uuid.UUID) *SiteuiCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (sc *SiteuiCreate) SetOwnerID(id uuid.UUID) *SiteuiCreate {
	sc.mutation.SetOwnerID(id)
	return sc
}

// SetOwner sets the "owner" edge to the User entity.
func (sc *SiteuiCreate) SetOwner(u *User) *SiteuiCreate {
	return sc.SetOwnerID(u.ID)
}

// Mutation returns the SiteuiMutation object of the builder.
func (sc *SiteuiCreate) Mutation() *SiteuiMutation {
	return sc.mutation
}

// Save creates the Siteui in the database.
func (sc *SiteuiCreate) Save(ctx context.Context) (*Siteui, error) {
	sc.defaults()
	return withHooks[*Siteui, SiteuiMutation](ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SiteuiCreate) SaveX(ctx context.Context) *Siteui {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SiteuiCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SiteuiCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SiteuiCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := siteui.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := siteui.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.HomepageImgUrl(); !ok {
		v := siteui.DefaultHomepageImgUrl
		sc.mutation.SetHomepageImgUrl(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := siteui.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SiteuiCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Siteui.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Siteui.updated_at"`)}
	}
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Siteui.user_id"`)}
	}
	if _, ok := sc.mutation.Sitename(); !ok {
		return &ValidationError{Name: "sitename", err: errors.New(`ent: missing required field "Siteui.sitename"`)}
	}
	if v, ok := sc.mutation.Sitename(); ok {
		if err := siteui.SitenameValidator(v); err != nil {
			return &ValidationError{Name: "sitename", err: fmt.Errorf(`ent: validator failed for field "Siteui.sitename": %w`, err)}
		}
	}
	if _, ok := sc.mutation.HomepageImgUrl(); !ok {
		return &ValidationError{Name: "homepageImgUrl", err: errors.New(`ent: missing required field "Siteui.homepageImgUrl"`)}
	}
	if v, ok := sc.mutation.HomepageImgUrl(); ok {
		if err := siteui.HomepageImgUrlValidator(v); err != nil {
			return &ValidationError{Name: "homepageImgUrl", err: fmt.Errorf(`ent: validator failed for field "Siteui.homepageImgUrl": %w`, err)}
		}
	}
	if _, ok := sc.mutation.HomepageText(); !ok {
		return &ValidationError{Name: "homepageText", err: errors.New(`ent: missing required field "Siteui.homepageText"`)}
	}
	if v, ok := sc.mutation.HomepageText(); ok {
		if err := siteui.HomepageTextValidator(v); err != nil {
			return &ValidationError{Name: "homepageText", err: fmt.Errorf(`ent: validator failed for field "Siteui.homepageText": %w`, err)}
		}
	}
	if _, ok := sc.mutation.HomepageTextColor(); !ok {
		return &ValidationError{Name: "homepageTextColor", err: errors.New(`ent: missing required field "Siteui.homepageTextColor"`)}
	}
	if v, ok := sc.mutation.HomepageTextColor(); ok {
		if err := siteui.HomepageTextColorValidator(v); err != nil {
			return &ValidationError{Name: "homepageTextColor", err: fmt.Errorf(`ent: validator failed for field "Siteui.homepageTextColor": %w`, err)}
		}
	}
	if _, ok := sc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Siteui.owner"`)}
	}
	return nil
}

func (sc *SiteuiCreate) sqlSave(ctx context.Context) (*Siteui, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SiteuiCreate) createSpec() (*Siteui, *sqlgraph.CreateSpec) {
	var (
		_node = &Siteui{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(siteui.Table, sqlgraph.NewFieldSpec(siteui.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(siteui.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(siteui.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Sitename(); ok {
		_spec.SetField(siteui.FieldSitename, field.TypeString, value)
		_node.Sitename = value
	}
	if value, ok := sc.mutation.HomepageImgUrl(); ok {
		_spec.SetField(siteui.FieldHomepageImgUrl, field.TypeString, value)
		_node.HomepageImgUrl = value
	}
	if value, ok := sc.mutation.HomepageText(); ok {
		_spec.SetField(siteui.FieldHomepageText, field.TypeString, value)
		_node.HomepageText = value
	}
	if value, ok := sc.mutation.HomepageTextColor(); ok {
		_spec.SetField(siteui.FieldHomepageTextColor, field.TypeString, value)
		_node.HomepageTextColor = value
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   siteui.OwnerTable,
			Columns: []string{siteui.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Siteui.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SiteuiUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sc *SiteuiCreate) OnConflict(opts ...sql.ConflictOption) *SiteuiUpsertOne {
	sc.conflict = opts
	return &SiteuiUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Siteui.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SiteuiCreate) OnConflictColumns(columns ...string) *SiteuiUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SiteuiUpsertOne{
		create: sc,
	}
}

type (
	// SiteuiUpsertOne is the builder for "upsert"-ing
	//  one Siteui node.
	SiteuiUpsertOne struct {
		create *SiteuiCreate
	}

	// SiteuiUpsert is the "OnConflict" setter.
	SiteuiUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SiteuiUpsert) SetUpdatedAt(v time.Time) *SiteuiUpsert {
	u.Set(siteui.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SiteuiUpsert) UpdateUpdatedAt() *SiteuiUpsert {
	u.SetExcluded(siteui.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *SiteuiUpsert) SetUserID(v uuid.UUID) *SiteuiUpsert {
	u.Set(siteui.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SiteuiUpsert) UpdateUserID() *SiteuiUpsert {
	u.SetExcluded(siteui.FieldUserID)
	return u
}

// SetSitename sets the "sitename" field.
func (u *SiteuiUpsert) SetSitename(v string) *SiteuiUpsert {
	u.Set(siteui.FieldSitename, v)
	return u
}

// UpdateSitename sets the "sitename" field to the value that was provided on create.
func (u *SiteuiUpsert) UpdateSitename() *SiteuiUpsert {
	u.SetExcluded(siteui.FieldSitename)
	return u
}

// SetHomepageImgUrl sets the "homepageImgUrl" field.
func (u *SiteuiUpsert) SetHomepageImgUrl(v string) *SiteuiUpsert {
	u.Set(siteui.FieldHomepageImgUrl, v)
	return u
}

// UpdateHomepageImgUrl sets the "homepageImgUrl" field to the value that was provided on create.
func (u *SiteuiUpsert) UpdateHomepageImgUrl() *SiteuiUpsert {
	u.SetExcluded(siteui.FieldHomepageImgUrl)
	return u
}

// SetHomepageText sets the "homepageText" field.
func (u *SiteuiUpsert) SetHomepageText(v string) *SiteuiUpsert {
	u.Set(siteui.FieldHomepageText, v)
	return u
}

// UpdateHomepageText sets the "homepageText" field to the value that was provided on create.
func (u *SiteuiUpsert) UpdateHomepageText() *SiteuiUpsert {
	u.SetExcluded(siteui.FieldHomepageText)
	return u
}

// SetHomepageTextColor sets the "homepageTextColor" field.
func (u *SiteuiUpsert) SetHomepageTextColor(v string) *SiteuiUpsert {
	u.Set(siteui.FieldHomepageTextColor, v)
	return u
}

// UpdateHomepageTextColor sets the "homepageTextColor" field to the value that was provided on create.
func (u *SiteuiUpsert) UpdateHomepageTextColor() *SiteuiUpsert {
	u.SetExcluded(siteui.FieldHomepageTextColor)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Siteui.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(siteui.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SiteuiUpsertOne) UpdateNewValues() *SiteuiUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(siteui.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(siteui.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Siteui.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SiteuiUpsertOne) Ignore() *SiteuiUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SiteuiUpsertOne) DoNothing() *SiteuiUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SiteuiCreate.OnConflict
// documentation for more info.
func (u *SiteuiUpsertOne) Update(set func(*SiteuiUpsert)) *SiteuiUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SiteuiUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SiteuiUpsertOne) SetUpdatedAt(v time.Time) *SiteuiUpsertOne {
	return u.Update(func(s *SiteuiUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SiteuiUpsertOne) UpdateUpdatedAt() *SiteuiUpsertOne {
	return u.Update(func(s *SiteuiUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *SiteuiUpsertOne) SetUserID(v uuid.UUID) *SiteuiUpsertOne {
	return u.Update(func(s *SiteuiUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SiteuiUpsertOne) UpdateUserID() *SiteuiUpsertOne {
	return u.Update(func(s *SiteuiUpsert) {
		s.UpdateUserID()
	})
}

// SetSitename sets the "sitename" field.
func (u *SiteuiUpsertOne) SetSitename(v string) *SiteuiUpsertOne {
	return u.Update(func(s *SiteuiUpsert) {
		s.SetSitename(v)
	})
}

// UpdateSitename sets the "sitename" field to the value that was provided on create.
func (u *SiteuiUpsertOne) UpdateSitename() *SiteuiUpsertOne {
	return u.Update(func(s *SiteuiUpsert) {
		s.UpdateSitename()
	})
}

// SetHomepageImgUrl sets the "homepageImgUrl" field.
func (u *SiteuiUpsertOne) SetHomepageImgUrl(v string) *SiteuiUpsertOne {
	return u.Update(func(s *SiteuiUpsert) {
		s.SetHomepageImgUrl(v)
	})
}

// UpdateHomepageImgUrl sets the "homepageImgUrl" field to the value that was provided on create.
func (u *SiteuiUpsertOne) UpdateHomepageImgUrl() *SiteuiUpsertOne {
	return u.Update(func(s *SiteuiUpsert) {
		s.UpdateHomepageImgUrl()
	})
}

// SetHomepageText sets the "homepageText" field.
func (u *SiteuiUpsertOne) SetHomepageText(v string) *SiteuiUpsertOne {
	return u.Update(func(s *SiteuiUpsert) {
		s.SetHomepageText(v)
	})
}

// UpdateHomepageText sets the "homepageText" field to the value that was provided on create.
func (u *SiteuiUpsertOne) UpdateHomepageText() *SiteuiUpsertOne {
	return u.Update(func(s *SiteuiUpsert) {
		s.UpdateHomepageText()
	})
}

// SetHomepageTextColor sets the "homepageTextColor" field.
func (u *SiteuiUpsertOne) SetHomepageTextColor(v string) *SiteuiUpsertOne {
	return u.Update(func(s *SiteuiUpsert) {
		s.SetHomepageTextColor(v)
	})
}

// UpdateHomepageTextColor sets the "homepageTextColor" field to the value that was provided on create.
func (u *SiteuiUpsertOne) UpdateHomepageTextColor() *SiteuiUpsertOne {
	return u.Update(func(s *SiteuiUpsert) {
		s.UpdateHomepageTextColor()
	})
}

// Exec executes the query.
func (u *SiteuiUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SiteuiCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SiteuiUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SiteuiUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SiteuiUpsertOne.ID is not supported by MySQL driver. Use SiteuiUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SiteuiUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SiteuiCreateBulk is the builder for creating many Siteui entities in bulk.
type SiteuiCreateBulk struct {
	config
	builders []*SiteuiCreate
	conflict []sql.ConflictOption
}

// Save creates the Siteui entities in the database.
func (scb *SiteuiCreateBulk) Save(ctx context.Context) ([]*Siteui, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Siteui, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SiteuiMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SiteuiCreateBulk) SaveX(ctx context.Context) []*Siteui {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SiteuiCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SiteuiCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Siteui.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SiteuiUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (scb *SiteuiCreateBulk) OnConflict(opts ...sql.ConflictOption) *SiteuiUpsertBulk {
	scb.conflict = opts
	return &SiteuiUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Siteui.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SiteuiCreateBulk) OnConflictColumns(columns ...string) *SiteuiUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SiteuiUpsertBulk{
		create: scb,
	}
}

// SiteuiUpsertBulk is the builder for "upsert"-ing
// a bulk of Siteui nodes.
type SiteuiUpsertBulk struct {
	create *SiteuiCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Siteui.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(siteui.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SiteuiUpsertBulk) UpdateNewValues() *SiteuiUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(siteui.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(siteui.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Siteui.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SiteuiUpsertBulk) Ignore() *SiteuiUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SiteuiUpsertBulk) DoNothing() *SiteuiUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SiteuiCreateBulk.OnConflict
// documentation for more info.
func (u *SiteuiUpsertBulk) Update(set func(*SiteuiUpsert)) *SiteuiUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SiteuiUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SiteuiUpsertBulk) SetUpdatedAt(v time.Time) *SiteuiUpsertBulk {
	return u.Update(func(s *SiteuiUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SiteuiUpsertBulk) UpdateUpdatedAt() *SiteuiUpsertBulk {
	return u.Update(func(s *SiteuiUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *SiteuiUpsertBulk) SetUserID(v uuid.UUID) *SiteuiUpsertBulk {
	return u.Update(func(s *SiteuiUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SiteuiUpsertBulk) UpdateUserID() *SiteuiUpsertBulk {
	return u.Update(func(s *SiteuiUpsert) {
		s.UpdateUserID()
	})
}

// SetSitename sets the "sitename" field.
func (u *SiteuiUpsertBulk) SetSitename(v string) *SiteuiUpsertBulk {
	return u.Update(func(s *SiteuiUpsert) {
		s.SetSitename(v)
	})
}

// UpdateSitename sets the "sitename" field to the value that was provided on create.
func (u *SiteuiUpsertBulk) UpdateSitename() *SiteuiUpsertBulk {
	return u.Update(func(s *SiteuiUpsert) {
		s.UpdateSitename()
	})
}

// SetHomepageImgUrl sets the "homepageImgUrl" field.
func (u *SiteuiUpsertBulk) SetHomepageImgUrl(v string) *SiteuiUpsertBulk {
	return u.Update(func(s *SiteuiUpsert) {
		s.SetHomepageImgUrl(v)
	})
}

// UpdateHomepageImgUrl sets the "homepageImgUrl" field to the value that was provided on create.
func (u *SiteuiUpsertBulk) UpdateHomepageImgUrl() *SiteuiUpsertBulk {
	return u.Update(func(s *SiteuiUpsert) {
		s.UpdateHomepageImgUrl()
	})
}

// SetHomepageText sets the "homepageText" field.
func (u *SiteuiUpsertBulk) SetHomepageText(v string) *SiteuiUpsertBulk {
	return u.Update(func(s *SiteuiUpsert) {
		s.SetHomepageText(v)
	})
}

// UpdateHomepageText sets the "homepageText" field to the value that was provided on create.
func (u *SiteuiUpsertBulk) UpdateHomepageText() *SiteuiUpsertBulk {
	return u.Update(func(s *SiteuiUpsert) {
		s.UpdateHomepageText()
	})
}

// SetHomepageTextColor sets the "homepageTextColor" field.
func (u *SiteuiUpsertBulk) SetHomepageTextColor(v string) *SiteuiUpsertBulk {
	return u.Update(func(s *SiteuiUpsert) {
		s.SetHomepageTextColor(v)
	})
}

// UpdateHomepageTextColor sets the "homepageTextColor" field to the value that was provided on create.
func (u *SiteuiUpsertBulk) UpdateHomepageTextColor() *SiteuiUpsertBulk {
	return u.Update(func(s *SiteuiUpsert) {
		s.UpdateHomepageTextColor()
	})
}

// Exec executes the query.
func (u *SiteuiUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SiteuiCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SiteuiCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SiteuiUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
