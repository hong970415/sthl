// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sthl/ent/order"
	"sthl/ent/orderitem"
	"sthl/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrderCreate) SetCreatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrderCreate) SetUpdatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetUserID sets the "user_id" field.
func (oc *OrderCreate) SetUserID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetUserID(u)
	return oc
}

// SetDiscount sets the "discount" field.
func (oc *OrderCreate) SetDiscount(f float64) *OrderCreate {
	oc.mutation.SetDiscount(f)
	return oc
}

// SetTotalAmount sets the "total_amount" field.
func (oc *OrderCreate) SetTotalAmount(f float64) *OrderCreate {
	oc.mutation.SetTotalAmount(f)
	return oc
}

// SetRemark sets the "remark" field.
func (oc *OrderCreate) SetRemark(s string) *OrderCreate {
	oc.mutation.SetRemark(s)
	return oc
}

// SetStatus sets the "status" field.
func (oc *OrderCreate) SetStatus(s string) *OrderCreate {
	oc.mutation.SetStatus(s)
	return oc
}

// SetPaymentStatus sets the "payment_status" field.
func (oc *OrderCreate) SetPaymentStatus(s string) *OrderCreate {
	oc.mutation.SetPaymentStatus(s)
	return oc
}

// SetPaymentMethod sets the "payment_method" field.
func (oc *OrderCreate) SetPaymentMethod(s string) *OrderCreate {
	oc.mutation.SetPaymentMethod(s)
	return oc
}

// SetDeliveryStatus sets the "delivery_status" field.
func (oc *OrderCreate) SetDeliveryStatus(s string) *OrderCreate {
	oc.mutation.SetDeliveryStatus(s)
	return oc
}

// SetShippingAddress sets the "shipping_address" field.
func (oc *OrderCreate) SetShippingAddress(s string) *OrderCreate {
	oc.mutation.SetShippingAddress(s)
	return oc
}

// SetTrackingNumber sets the "tracking_number" field.
func (oc *OrderCreate) SetTrackingNumber(s string) *OrderCreate {
	oc.mutation.SetTrackingNumber(s)
	return oc
}

// SetIsArchived sets the "is_archived" field.
func (oc *OrderCreate) SetIsArchived(b bool) *OrderCreate {
	oc.mutation.SetIsArchived(b)
	return oc
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (oc *OrderCreate) SetNillableIsArchived(b *bool) *OrderCreate {
	if b != nil {
		oc.SetIsArchived(*b)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetID(u)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableID(u *uuid.UUID) *OrderCreate {
	if u != nil {
		oc.SetID(*u)
	}
	return oc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (oc *OrderCreate) SetOwnerID(id uuid.UUID) *OrderCreate {
	oc.mutation.SetOwnerID(id)
	return oc
}

// SetOwner sets the "owner" edge to the User entity.
func (oc *OrderCreate) SetOwner(u *User) *OrderCreate {
	return oc.SetOwnerID(u.ID)
}

// AddOrderitemIDs adds the "orderitems" edge to the OrderItem entity by IDs.
func (oc *OrderCreate) AddOrderitemIDs(ids ...uuid.UUID) *OrderCreate {
	oc.mutation.AddOrderitemIDs(ids...)
	return oc
}

// AddOrderitems adds the "orderitems" edges to the OrderItem entity.
func (oc *OrderCreate) AddOrderitems(o ...*OrderItem) *OrderCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddOrderitemIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	oc.defaults()
	return withHooks[*Order, OrderMutation](ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := order.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := order.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.IsArchived(); !ok {
		v := order.DefaultIsArchived
		oc.mutation.SetIsArchived(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		v := order.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Order.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Order.updated_at"`)}
	}
	if _, ok := oc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Order.user_id"`)}
	}
	if _, ok := oc.mutation.Discount(); !ok {
		return &ValidationError{Name: "discount", err: errors.New(`ent: missing required field "Order.discount"`)}
	}
	if v, ok := oc.mutation.Discount(); ok {
		if err := order.DiscountValidator(v); err != nil {
			return &ValidationError{Name: "discount", err: fmt.Errorf(`ent: validator failed for field "Order.discount": %w`, err)}
		}
	}
	if _, ok := oc.mutation.TotalAmount(); !ok {
		return &ValidationError{Name: "total_amount", err: errors.New(`ent: missing required field "Order.total_amount"`)}
	}
	if v, ok := oc.mutation.TotalAmount(); ok {
		if err := order.TotalAmountValidator(v); err != nil {
			return &ValidationError{Name: "total_amount", err: fmt.Errorf(`ent: validator failed for field "Order.total_amount": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "Order.remark"`)}
	}
	if v, ok := oc.mutation.Remark(); ok {
		if err := order.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: validator failed for field "Order.remark": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Order.status"`)}
	}
	if v, ok := oc.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if _, ok := oc.mutation.PaymentStatus(); !ok {
		return &ValidationError{Name: "payment_status", err: errors.New(`ent: missing required field "Order.payment_status"`)}
	}
	if v, ok := oc.mutation.PaymentStatus(); ok {
		if err := order.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "Order.payment_status": %w`, err)}
		}
	}
	if _, ok := oc.mutation.PaymentMethod(); !ok {
		return &ValidationError{Name: "payment_method", err: errors.New(`ent: missing required field "Order.payment_method"`)}
	}
	if v, ok := oc.mutation.PaymentMethod(); ok {
		if err := order.PaymentMethodValidator(v); err != nil {
			return &ValidationError{Name: "payment_method", err: fmt.Errorf(`ent: validator failed for field "Order.payment_method": %w`, err)}
		}
	}
	if _, ok := oc.mutation.DeliveryStatus(); !ok {
		return &ValidationError{Name: "delivery_status", err: errors.New(`ent: missing required field "Order.delivery_status"`)}
	}
	if v, ok := oc.mutation.DeliveryStatus(); ok {
		if err := order.DeliveryStatusValidator(v); err != nil {
			return &ValidationError{Name: "delivery_status", err: fmt.Errorf(`ent: validator failed for field "Order.delivery_status": %w`, err)}
		}
	}
	if _, ok := oc.mutation.ShippingAddress(); !ok {
		return &ValidationError{Name: "shipping_address", err: errors.New(`ent: missing required field "Order.shipping_address"`)}
	}
	if v, ok := oc.mutation.ShippingAddress(); ok {
		if err := order.ShippingAddressValidator(v); err != nil {
			return &ValidationError{Name: "shipping_address", err: fmt.Errorf(`ent: validator failed for field "Order.shipping_address": %w`, err)}
		}
	}
	if _, ok := oc.mutation.TrackingNumber(); !ok {
		return &ValidationError{Name: "tracking_number", err: errors.New(`ent: missing required field "Order.tracking_number"`)}
	}
	if v, ok := oc.mutation.TrackingNumber(); ok {
		if err := order.TrackingNumberValidator(v); err != nil {
			return &ValidationError{Name: "tracking_number", err: fmt.Errorf(`ent: validator failed for field "Order.tracking_number": %w`, err)}
		}
	}
	if _, ok := oc.mutation.IsArchived(); !ok {
		return &ValidationError{Name: "is_archived", err: errors.New(`ent: missing required field "Order.is_archived"`)}
	}
	if _, ok := oc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Order.owner"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = oc.conflict
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.Discount(); ok {
		_spec.SetField(order.FieldDiscount, field.TypeFloat64, value)
		_node.Discount = value
	}
	if value, ok := oc.mutation.TotalAmount(); ok {
		_spec.SetField(order.FieldTotalAmount, field.TypeFloat64, value)
		_node.TotalAmount = value
	}
	if value, ok := oc.mutation.Remark(); ok {
		_spec.SetField(order.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := oc.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := oc.mutation.PaymentStatus(); ok {
		_spec.SetField(order.FieldPaymentStatus, field.TypeString, value)
		_node.PaymentStatus = value
	}
	if value, ok := oc.mutation.PaymentMethod(); ok {
		_spec.SetField(order.FieldPaymentMethod, field.TypeString, value)
		_node.PaymentMethod = value
	}
	if value, ok := oc.mutation.DeliveryStatus(); ok {
		_spec.SetField(order.FieldDeliveryStatus, field.TypeString, value)
		_node.DeliveryStatus = value
	}
	if value, ok := oc.mutation.ShippingAddress(); ok {
		_spec.SetField(order.FieldShippingAddress, field.TypeString, value)
		_node.ShippingAddress = value
	}
	if value, ok := oc.mutation.TrackingNumber(); ok {
		_spec.SetField(order.FieldTrackingNumber, field.TypeString, value)
		_node.TrackingNumber = value
	}
	if value, ok := oc.mutation.IsArchived(); ok {
		_spec.SetField(order.FieldIsArchived, field.TypeBool, value)
		_node.IsArchived = value
	}
	if nodes := oc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OwnerTable,
			Columns: []string{order.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OrderitemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderitemsTable,
			Columns: []string{order.OrderitemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (oc *OrderCreate) OnConflict(opts ...sql.ConflictOption) *OrderUpsertOne {
	oc.conflict = opts
	return &OrderUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *OrderCreate) OnConflictColumns(columns ...string) *OrderUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertOne{
		create: oc,
	}
}

type (
	// OrderUpsertOne is the builder for "upsert"-ing
	//  one Order node.
	OrderUpsertOne struct {
		create *OrderCreate
	}

	// OrderUpsert is the "OnConflict" setter.
	OrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsert) SetUpdatedAt(v time.Time) *OrderUpsert {
	u.Set(order.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUpdatedAt() *OrderUpsert {
	u.SetExcluded(order.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *OrderUpsert) SetUserID(v uuid.UUID) *OrderUpsert {
	u.Set(order.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUserID() *OrderUpsert {
	u.SetExcluded(order.FieldUserID)
	return u
}

// SetDiscount sets the "discount" field.
func (u *OrderUpsert) SetDiscount(v float64) *OrderUpsert {
	u.Set(order.FieldDiscount, v)
	return u
}

// UpdateDiscount sets the "discount" field to the value that was provided on create.
func (u *OrderUpsert) UpdateDiscount() *OrderUpsert {
	u.SetExcluded(order.FieldDiscount)
	return u
}

// AddDiscount adds v to the "discount" field.
func (u *OrderUpsert) AddDiscount(v float64) *OrderUpsert {
	u.Add(order.FieldDiscount, v)
	return u
}

// SetTotalAmount sets the "total_amount" field.
func (u *OrderUpsert) SetTotalAmount(v float64) *OrderUpsert {
	u.Set(order.FieldTotalAmount, v)
	return u
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *OrderUpsert) UpdateTotalAmount() *OrderUpsert {
	u.SetExcluded(order.FieldTotalAmount)
	return u
}

// AddTotalAmount adds v to the "total_amount" field.
func (u *OrderUpsert) AddTotalAmount(v float64) *OrderUpsert {
	u.Add(order.FieldTotalAmount, v)
	return u
}

// SetRemark sets the "remark" field.
func (u *OrderUpsert) SetRemark(v string) *OrderUpsert {
	u.Set(order.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderUpsert) UpdateRemark() *OrderUpsert {
	u.SetExcluded(order.FieldRemark)
	return u
}

// SetStatus sets the "status" field.
func (u *OrderUpsert) SetStatus(v string) *OrderUpsert {
	u.Set(order.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsert) UpdateStatus() *OrderUpsert {
	u.SetExcluded(order.FieldStatus)
	return u
}

// SetPaymentStatus sets the "payment_status" field.
func (u *OrderUpsert) SetPaymentStatus(v string) *OrderUpsert {
	u.Set(order.FieldPaymentStatus, v)
	return u
}

// UpdatePaymentStatus sets the "payment_status" field to the value that was provided on create.
func (u *OrderUpsert) UpdatePaymentStatus() *OrderUpsert {
	u.SetExcluded(order.FieldPaymentStatus)
	return u
}

// SetPaymentMethod sets the "payment_method" field.
func (u *OrderUpsert) SetPaymentMethod(v string) *OrderUpsert {
	u.Set(order.FieldPaymentMethod, v)
	return u
}

// UpdatePaymentMethod sets the "payment_method" field to the value that was provided on create.
func (u *OrderUpsert) UpdatePaymentMethod() *OrderUpsert {
	u.SetExcluded(order.FieldPaymentMethod)
	return u
}

// SetDeliveryStatus sets the "delivery_status" field.
func (u *OrderUpsert) SetDeliveryStatus(v string) *OrderUpsert {
	u.Set(order.FieldDeliveryStatus, v)
	return u
}

// UpdateDeliveryStatus sets the "delivery_status" field to the value that was provided on create.
func (u *OrderUpsert) UpdateDeliveryStatus() *OrderUpsert {
	u.SetExcluded(order.FieldDeliveryStatus)
	return u
}

// SetShippingAddress sets the "shipping_address" field.
func (u *OrderUpsert) SetShippingAddress(v string) *OrderUpsert {
	u.Set(order.FieldShippingAddress, v)
	return u
}

// UpdateShippingAddress sets the "shipping_address" field to the value that was provided on create.
func (u *OrderUpsert) UpdateShippingAddress() *OrderUpsert {
	u.SetExcluded(order.FieldShippingAddress)
	return u
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *OrderUpsert) SetTrackingNumber(v string) *OrderUpsert {
	u.Set(order.FieldTrackingNumber, v)
	return u
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *OrderUpsert) UpdateTrackingNumber() *OrderUpsert {
	u.SetExcluded(order.FieldTrackingNumber)
	return u
}

// SetIsArchived sets the "is_archived" field.
func (u *OrderUpsert) SetIsArchived(v bool) *OrderUpsert {
	u.Set(order.FieldIsArchived, v)
	return u
}

// UpdateIsArchived sets the "is_archived" field to the value that was provided on create.
func (u *OrderUpsert) UpdateIsArchived() *OrderUpsert {
	u.SetExcluded(order.FieldIsArchived)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(order.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderUpsertOne) UpdateNewValues() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(order.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(order.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderUpsertOne) Ignore() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertOne) DoNothing() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreate.OnConflict
// documentation for more info.
func (u *OrderUpsertOne) Update(set func(*OrderUpsert)) *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsertOne) SetUpdatedAt(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUpdatedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrderUpsertOne) SetUserID(v uuid.UUID) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUserID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUserID()
	})
}

// SetDiscount sets the "discount" field.
func (u *OrderUpsertOne) SetDiscount(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetDiscount(v)
	})
}

// AddDiscount adds v to the "discount" field.
func (u *OrderUpsertOne) AddDiscount(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddDiscount(v)
	})
}

// UpdateDiscount sets the "discount" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateDiscount() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDiscount()
	})
}

// SetTotalAmount sets the "total_amount" field.
func (u *OrderUpsertOne) SetTotalAmount(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetTotalAmount(v)
	})
}

// AddTotalAmount adds v to the "total_amount" field.
func (u *OrderUpsertOne) AddTotalAmount(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddTotalAmount(v)
	})
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateTotalAmount() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTotalAmount()
	})
}

// SetRemark sets the "remark" field.
func (u *OrderUpsertOne) SetRemark(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateRemark() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRemark()
	})
}

// SetStatus sets the "status" field.
func (u *OrderUpsertOne) SetStatus(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateStatus() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStatus()
	})
}

// SetPaymentStatus sets the "payment_status" field.
func (u *OrderUpsertOne) SetPaymentStatus(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetPaymentStatus(v)
	})
}

// UpdatePaymentStatus sets the "payment_status" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdatePaymentStatus() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePaymentStatus()
	})
}

// SetPaymentMethod sets the "payment_method" field.
func (u *OrderUpsertOne) SetPaymentMethod(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetPaymentMethod(v)
	})
}

// UpdatePaymentMethod sets the "payment_method" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdatePaymentMethod() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePaymentMethod()
	})
}

// SetDeliveryStatus sets the "delivery_status" field.
func (u *OrderUpsertOne) SetDeliveryStatus(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetDeliveryStatus(v)
	})
}

// UpdateDeliveryStatus sets the "delivery_status" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateDeliveryStatus() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDeliveryStatus()
	})
}

// SetShippingAddress sets the "shipping_address" field.
func (u *OrderUpsertOne) SetShippingAddress(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetShippingAddress(v)
	})
}

// UpdateShippingAddress sets the "shipping_address" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateShippingAddress() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateShippingAddress()
	})
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *OrderUpsertOne) SetTrackingNumber(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetTrackingNumber(v)
	})
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateTrackingNumber() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTrackingNumber()
	})
}

// SetIsArchived sets the "is_archived" field.
func (u *OrderUpsertOne) SetIsArchived(v bool) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetIsArchived(v)
	})
}

// UpdateIsArchived sets the "is_archived" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateIsArchived() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateIsArchived()
	})
}

// Exec executes the query.
func (u *OrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OrderUpsertOne.ID is not supported by MySQL driver. Use OrderUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	builders []*OrderCreate
	conflict []sql.ConflictOption
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ocb *OrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderUpsertBulk {
	ocb.conflict = opts
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *OrderCreateBulk) OnConflictColumns(columns ...string) *OrderUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OrderUpsertBulk is the builder for "upsert"-ing
// a bulk of Order nodes.
type OrderUpsertBulk struct {
	create *OrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(order.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderUpsertBulk) UpdateNewValues() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(order.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(order.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderUpsertBulk) Ignore() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertBulk) DoNothing() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreateBulk.OnConflict
// documentation for more info.
func (u *OrderUpsertBulk) Update(set func(*OrderUpsert)) *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsertBulk) SetUpdatedAt(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUpdatedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrderUpsertBulk) SetUserID(v uuid.UUID) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUserID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUserID()
	})
}

// SetDiscount sets the "discount" field.
func (u *OrderUpsertBulk) SetDiscount(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetDiscount(v)
	})
}

// AddDiscount adds v to the "discount" field.
func (u *OrderUpsertBulk) AddDiscount(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddDiscount(v)
	})
}

// UpdateDiscount sets the "discount" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateDiscount() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDiscount()
	})
}

// SetTotalAmount sets the "total_amount" field.
func (u *OrderUpsertBulk) SetTotalAmount(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetTotalAmount(v)
	})
}

// AddTotalAmount adds v to the "total_amount" field.
func (u *OrderUpsertBulk) AddTotalAmount(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddTotalAmount(v)
	})
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateTotalAmount() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTotalAmount()
	})
}

// SetRemark sets the "remark" field.
func (u *OrderUpsertBulk) SetRemark(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateRemark() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRemark()
	})
}

// SetStatus sets the "status" field.
func (u *OrderUpsertBulk) SetStatus(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateStatus() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStatus()
	})
}

// SetPaymentStatus sets the "payment_status" field.
func (u *OrderUpsertBulk) SetPaymentStatus(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetPaymentStatus(v)
	})
}

// UpdatePaymentStatus sets the "payment_status" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdatePaymentStatus() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePaymentStatus()
	})
}

// SetPaymentMethod sets the "payment_method" field.
func (u *OrderUpsertBulk) SetPaymentMethod(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetPaymentMethod(v)
	})
}

// UpdatePaymentMethod sets the "payment_method" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdatePaymentMethod() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePaymentMethod()
	})
}

// SetDeliveryStatus sets the "delivery_status" field.
func (u *OrderUpsertBulk) SetDeliveryStatus(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetDeliveryStatus(v)
	})
}

// UpdateDeliveryStatus sets the "delivery_status" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateDeliveryStatus() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDeliveryStatus()
	})
}

// SetShippingAddress sets the "shipping_address" field.
func (u *OrderUpsertBulk) SetShippingAddress(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetShippingAddress(v)
	})
}

// UpdateShippingAddress sets the "shipping_address" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateShippingAddress() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateShippingAddress()
	})
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *OrderUpsertBulk) SetTrackingNumber(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetTrackingNumber(v)
	})
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateTrackingNumber() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTrackingNumber()
	})
}

// SetIsArchived sets the "is_archived" field.
func (u *OrderUpsertBulk) SetIsArchived(v bool) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetIsArchived(v)
	})
}

// UpdateIsArchived sets the "is_archived" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateIsArchived() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateIsArchived()
	})
}

// Exec executes the query.
func (u *OrderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
