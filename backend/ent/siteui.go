// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sthl/ent/siteui"
	"sthl/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Siteui is the model entity for the Siteui schema.
type Siteui struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"userId"`
	// Sitename holds the value of the "sitename" field.
	Sitename string `json:"sitename"`
	// HomepageImgUrl holds the value of the "homepageImgUrl" field.
	HomepageImgUrl string `json:"homepageImgUrl"`
	// HomepageText holds the value of the "homepageText" field.
	HomepageText string `json:"homepageText"`
	// HomepageTextColor holds the value of the "homepageTextColor" field.
	HomepageTextColor string `json:"homepageTextColor"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SiteuiQuery when eager-loading is set.
	Edges SiteuiEdges `json:"-"`
}

// SiteuiEdges holds the relations/edges for other nodes in the graph.
type SiteuiEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SiteuiEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Siteui) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case siteui.FieldSitename, siteui.FieldHomepageImgUrl, siteui.FieldHomepageText, siteui.FieldHomepageTextColor:
			values[i] = new(sql.NullString)
		case siteui.FieldCreatedAt, siteui.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case siteui.FieldID, siteui.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Siteui", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Siteui fields.
func (s *Siteui) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case siteui.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case siteui.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case siteui.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case siteui.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				s.UserID = *value
			}
		case siteui.FieldSitename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sitename", values[i])
			} else if value.Valid {
				s.Sitename = value.String
			}
		case siteui.FieldHomepageImgUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field homepageImgUrl", values[i])
			} else if value.Valid {
				s.HomepageImgUrl = value.String
			}
		case siteui.FieldHomepageText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field homepageText", values[i])
			} else if value.Valid {
				s.HomepageText = value.String
			}
		case siteui.FieldHomepageTextColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field homepageTextColor", values[i])
			} else if value.Valid {
				s.HomepageTextColor = value.String
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Siteui entity.
func (s *Siteui) QueryOwner() *UserQuery {
	return NewSiteuiClient(s.config).QueryOwner(s)
}

// Update returns a builder for updating this Siteui.
// Note that you need to call Siteui.Unwrap() before calling this method if this Siteui
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Siteui) Update() *SiteuiUpdateOne {
	return NewSiteuiClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Siteui entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Siteui) Unwrap() *Siteui {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Siteui is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Siteui) String() string {
	var builder strings.Builder
	builder.WriteString("Siteui(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", s.UserID))
	builder.WriteString(", ")
	builder.WriteString("sitename=")
	builder.WriteString(s.Sitename)
	builder.WriteString(", ")
	builder.WriteString("homepageImgUrl=")
	builder.WriteString(s.HomepageImgUrl)
	builder.WriteString(", ")
	builder.WriteString("homepageText=")
	builder.WriteString(s.HomepageText)
	builder.WriteString(", ")
	builder.WriteString("homepageTextColor=")
	builder.WriteString(s.HomepageTextColor)
	builder.WriteByte(')')
	return builder.String()
}

// Siteuis is a parsable slice of Siteui.
type Siteuis []*Siteui
