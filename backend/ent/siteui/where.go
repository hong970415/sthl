// Code generated by ent, DO NOT EDIT.

package siteui

import (
	"sthl/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Siteui {
	return predicate.Siteui(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Siteui {
	return predicate.Siteui(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Siteui {
	return predicate.Siteui(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Siteui {
	return predicate.Siteui(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Siteui {
	return predicate.Siteui(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Siteui {
	return predicate.Siteui(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Siteui {
	return predicate.Siteui(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Siteui {
	return predicate.Siteui(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Siteui {
	return predicate.Siteui(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Siteui {
	return predicate.Siteui(sql.FieldEQ(FieldUserID, v))
}

// Sitename applies equality check predicate on the "sitename" field. It's identical to SitenameEQ.
func Sitename(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldEQ(FieldSitename, v))
}

// HomepageImgUrl applies equality check predicate on the "homepageImgUrl" field. It's identical to HomepageImgUrlEQ.
func HomepageImgUrl(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldEQ(FieldHomepageImgUrl, v))
}

// HomepageText applies equality check predicate on the "homepageText" field. It's identical to HomepageTextEQ.
func HomepageText(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldEQ(FieldHomepageText, v))
}

// HomepageTextColor applies equality check predicate on the "homepageTextColor" field. It's identical to HomepageTextColorEQ.
func HomepageTextColor(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldEQ(FieldHomepageTextColor, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Siteui {
	return predicate.Siteui(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Siteui {
	return predicate.Siteui(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Siteui {
	return predicate.Siteui(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Siteui {
	return predicate.Siteui(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Siteui {
	return predicate.Siteui(sql.FieldNotIn(FieldUserID, vs...))
}

// SitenameEQ applies the EQ predicate on the "sitename" field.
func SitenameEQ(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldEQ(FieldSitename, v))
}

// SitenameNEQ applies the NEQ predicate on the "sitename" field.
func SitenameNEQ(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldNEQ(FieldSitename, v))
}

// SitenameIn applies the In predicate on the "sitename" field.
func SitenameIn(vs ...string) predicate.Siteui {
	return predicate.Siteui(sql.FieldIn(FieldSitename, vs...))
}

// SitenameNotIn applies the NotIn predicate on the "sitename" field.
func SitenameNotIn(vs ...string) predicate.Siteui {
	return predicate.Siteui(sql.FieldNotIn(FieldSitename, vs...))
}

// SitenameGT applies the GT predicate on the "sitename" field.
func SitenameGT(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldGT(FieldSitename, v))
}

// SitenameGTE applies the GTE predicate on the "sitename" field.
func SitenameGTE(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldGTE(FieldSitename, v))
}

// SitenameLT applies the LT predicate on the "sitename" field.
func SitenameLT(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldLT(FieldSitename, v))
}

// SitenameLTE applies the LTE predicate on the "sitename" field.
func SitenameLTE(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldLTE(FieldSitename, v))
}

// SitenameContains applies the Contains predicate on the "sitename" field.
func SitenameContains(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldContains(FieldSitename, v))
}

// SitenameHasPrefix applies the HasPrefix predicate on the "sitename" field.
func SitenameHasPrefix(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldHasPrefix(FieldSitename, v))
}

// SitenameHasSuffix applies the HasSuffix predicate on the "sitename" field.
func SitenameHasSuffix(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldHasSuffix(FieldSitename, v))
}

// SitenameEqualFold applies the EqualFold predicate on the "sitename" field.
func SitenameEqualFold(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldEqualFold(FieldSitename, v))
}

// SitenameContainsFold applies the ContainsFold predicate on the "sitename" field.
func SitenameContainsFold(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldContainsFold(FieldSitename, v))
}

// HomepageImgUrlEQ applies the EQ predicate on the "homepageImgUrl" field.
func HomepageImgUrlEQ(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldEQ(FieldHomepageImgUrl, v))
}

// HomepageImgUrlNEQ applies the NEQ predicate on the "homepageImgUrl" field.
func HomepageImgUrlNEQ(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldNEQ(FieldHomepageImgUrl, v))
}

// HomepageImgUrlIn applies the In predicate on the "homepageImgUrl" field.
func HomepageImgUrlIn(vs ...string) predicate.Siteui {
	return predicate.Siteui(sql.FieldIn(FieldHomepageImgUrl, vs...))
}

// HomepageImgUrlNotIn applies the NotIn predicate on the "homepageImgUrl" field.
func HomepageImgUrlNotIn(vs ...string) predicate.Siteui {
	return predicate.Siteui(sql.FieldNotIn(FieldHomepageImgUrl, vs...))
}

// HomepageImgUrlGT applies the GT predicate on the "homepageImgUrl" field.
func HomepageImgUrlGT(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldGT(FieldHomepageImgUrl, v))
}

// HomepageImgUrlGTE applies the GTE predicate on the "homepageImgUrl" field.
func HomepageImgUrlGTE(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldGTE(FieldHomepageImgUrl, v))
}

// HomepageImgUrlLT applies the LT predicate on the "homepageImgUrl" field.
func HomepageImgUrlLT(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldLT(FieldHomepageImgUrl, v))
}

// HomepageImgUrlLTE applies the LTE predicate on the "homepageImgUrl" field.
func HomepageImgUrlLTE(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldLTE(FieldHomepageImgUrl, v))
}

// HomepageImgUrlContains applies the Contains predicate on the "homepageImgUrl" field.
func HomepageImgUrlContains(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldContains(FieldHomepageImgUrl, v))
}

// HomepageImgUrlHasPrefix applies the HasPrefix predicate on the "homepageImgUrl" field.
func HomepageImgUrlHasPrefix(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldHasPrefix(FieldHomepageImgUrl, v))
}

// HomepageImgUrlHasSuffix applies the HasSuffix predicate on the "homepageImgUrl" field.
func HomepageImgUrlHasSuffix(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldHasSuffix(FieldHomepageImgUrl, v))
}

// HomepageImgUrlEqualFold applies the EqualFold predicate on the "homepageImgUrl" field.
func HomepageImgUrlEqualFold(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldEqualFold(FieldHomepageImgUrl, v))
}

// HomepageImgUrlContainsFold applies the ContainsFold predicate on the "homepageImgUrl" field.
func HomepageImgUrlContainsFold(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldContainsFold(FieldHomepageImgUrl, v))
}

// HomepageTextEQ applies the EQ predicate on the "homepageText" field.
func HomepageTextEQ(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldEQ(FieldHomepageText, v))
}

// HomepageTextNEQ applies the NEQ predicate on the "homepageText" field.
func HomepageTextNEQ(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldNEQ(FieldHomepageText, v))
}

// HomepageTextIn applies the In predicate on the "homepageText" field.
func HomepageTextIn(vs ...string) predicate.Siteui {
	return predicate.Siteui(sql.FieldIn(FieldHomepageText, vs...))
}

// HomepageTextNotIn applies the NotIn predicate on the "homepageText" field.
func HomepageTextNotIn(vs ...string) predicate.Siteui {
	return predicate.Siteui(sql.FieldNotIn(FieldHomepageText, vs...))
}

// HomepageTextGT applies the GT predicate on the "homepageText" field.
func HomepageTextGT(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldGT(FieldHomepageText, v))
}

// HomepageTextGTE applies the GTE predicate on the "homepageText" field.
func HomepageTextGTE(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldGTE(FieldHomepageText, v))
}

// HomepageTextLT applies the LT predicate on the "homepageText" field.
func HomepageTextLT(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldLT(FieldHomepageText, v))
}

// HomepageTextLTE applies the LTE predicate on the "homepageText" field.
func HomepageTextLTE(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldLTE(FieldHomepageText, v))
}

// HomepageTextContains applies the Contains predicate on the "homepageText" field.
func HomepageTextContains(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldContains(FieldHomepageText, v))
}

// HomepageTextHasPrefix applies the HasPrefix predicate on the "homepageText" field.
func HomepageTextHasPrefix(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldHasPrefix(FieldHomepageText, v))
}

// HomepageTextHasSuffix applies the HasSuffix predicate on the "homepageText" field.
func HomepageTextHasSuffix(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldHasSuffix(FieldHomepageText, v))
}

// HomepageTextEqualFold applies the EqualFold predicate on the "homepageText" field.
func HomepageTextEqualFold(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldEqualFold(FieldHomepageText, v))
}

// HomepageTextContainsFold applies the ContainsFold predicate on the "homepageText" field.
func HomepageTextContainsFold(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldContainsFold(FieldHomepageText, v))
}

// HomepageTextColorEQ applies the EQ predicate on the "homepageTextColor" field.
func HomepageTextColorEQ(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldEQ(FieldHomepageTextColor, v))
}

// HomepageTextColorNEQ applies the NEQ predicate on the "homepageTextColor" field.
func HomepageTextColorNEQ(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldNEQ(FieldHomepageTextColor, v))
}

// HomepageTextColorIn applies the In predicate on the "homepageTextColor" field.
func HomepageTextColorIn(vs ...string) predicate.Siteui {
	return predicate.Siteui(sql.FieldIn(FieldHomepageTextColor, vs...))
}

// HomepageTextColorNotIn applies the NotIn predicate on the "homepageTextColor" field.
func HomepageTextColorNotIn(vs ...string) predicate.Siteui {
	return predicate.Siteui(sql.FieldNotIn(FieldHomepageTextColor, vs...))
}

// HomepageTextColorGT applies the GT predicate on the "homepageTextColor" field.
func HomepageTextColorGT(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldGT(FieldHomepageTextColor, v))
}

// HomepageTextColorGTE applies the GTE predicate on the "homepageTextColor" field.
func HomepageTextColorGTE(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldGTE(FieldHomepageTextColor, v))
}

// HomepageTextColorLT applies the LT predicate on the "homepageTextColor" field.
func HomepageTextColorLT(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldLT(FieldHomepageTextColor, v))
}

// HomepageTextColorLTE applies the LTE predicate on the "homepageTextColor" field.
func HomepageTextColorLTE(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldLTE(FieldHomepageTextColor, v))
}

// HomepageTextColorContains applies the Contains predicate on the "homepageTextColor" field.
func HomepageTextColorContains(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldContains(FieldHomepageTextColor, v))
}

// HomepageTextColorHasPrefix applies the HasPrefix predicate on the "homepageTextColor" field.
func HomepageTextColorHasPrefix(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldHasPrefix(FieldHomepageTextColor, v))
}

// HomepageTextColorHasSuffix applies the HasSuffix predicate on the "homepageTextColor" field.
func HomepageTextColorHasSuffix(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldHasSuffix(FieldHomepageTextColor, v))
}

// HomepageTextColorEqualFold applies the EqualFold predicate on the "homepageTextColor" field.
func HomepageTextColorEqualFold(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldEqualFold(FieldHomepageTextColor, v))
}

// HomepageTextColorContainsFold applies the ContainsFold predicate on the "homepageTextColor" field.
func HomepageTextColorContainsFold(v string) predicate.Siteui {
	return predicate.Siteui(sql.FieldContainsFold(FieldHomepageTextColor, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Siteui {
	return predicate.Siteui(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Siteui {
	return predicate.Siteui(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Siteui) predicate.Siteui {
	return predicate.Siteui(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Siteui) predicate.Siteui {
	return predicate.Siteui(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Siteui) predicate.Siteui {
	return predicate.Siteui(func(s *sql.Selector) {
		p(s.Not())
	})
}
