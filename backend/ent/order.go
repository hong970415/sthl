// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sthl/ent/order"
	"sthl/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"userId"`
	// Discount holds the value of the "discount" field.
	Discount float64 `json:"discount"`
	// TotalAmount holds the value of the "total_amount" field.
	TotalAmount float64 `json:"totalAmount"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark"`
	// Status holds the value of the "status" field.
	Status string `json:"status"`
	// PaymentStatus holds the value of the "payment_status" field.
	PaymentStatus string `json:"paymentStatus"`
	// PaymentMethod holds the value of the "payment_method" field.
	PaymentMethod string `json:"paymentMethod"`
	// DeliveryStatus holds the value of the "delivery_status" field.
	DeliveryStatus string `json:"deliveryStatus"`
	// ShippingAddress holds the value of the "shipping_address" field.
	ShippingAddress string `json:"shippingAddress"`
	// TrackingNumber holds the value of the "tracking_number" field.
	TrackingNumber string `json:"trackingNumber"`
	// IsArchived holds the value of the "is_archived" field.
	IsArchived bool `json:"isArchived"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges OrderEdges `json:"-"`
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Orderitems holds the value of the orderitems edge.
	Orderitems []*OrderItem `json:"orderitems,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// OrderitemsOrErr returns the Orderitems value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) OrderitemsOrErr() ([]*OrderItem, error) {
	if e.loadedTypes[1] {
		return e.Orderitems, nil
	}
	return nil, &NotLoadedError{edge: "orderitems"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldIsArchived:
			values[i] = new(sql.NullBool)
		case order.FieldDiscount, order.FieldTotalAmount:
			values[i] = new(sql.NullFloat64)
		case order.FieldRemark, order.FieldStatus, order.FieldPaymentStatus, order.FieldPaymentMethod, order.FieldDeliveryStatus, order.FieldShippingAddress, order.FieldTrackingNumber:
			values[i] = new(sql.NullString)
		case order.FieldCreatedAt, order.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case order.FieldID, order.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Order", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case order.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case order.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		case order.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				o.UserID = *value
			}
		case order.FieldDiscount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field discount", values[i])
			} else if value.Valid {
				o.Discount = value.Float64
			}
		case order.FieldTotalAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_amount", values[i])
			} else if value.Valid {
				o.TotalAmount = value.Float64
			}
		case order.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				o.Remark = value.String
			}
		case order.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				o.Status = value.String
			}
		case order.FieldPaymentStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_status", values[i])
			} else if value.Valid {
				o.PaymentStatus = value.String
			}
		case order.FieldPaymentMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method", values[i])
			} else if value.Valid {
				o.PaymentMethod = value.String
			}
		case order.FieldDeliveryStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_status", values[i])
			} else if value.Valid {
				o.DeliveryStatus = value.String
			}
		case order.FieldShippingAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_address", values[i])
			} else if value.Valid {
				o.ShippingAddress = value.String
			}
		case order.FieldTrackingNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tracking_number", values[i])
			} else if value.Valid {
				o.TrackingNumber = value.String
			}
		case order.FieldIsArchived:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_archived", values[i])
			} else if value.Valid {
				o.IsArchived = value.Bool
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Order entity.
func (o *Order) QueryOwner() *UserQuery {
	return NewOrderClient(o.config).QueryOwner(o)
}

// QueryOrderitems queries the "orderitems" edge of the Order entity.
func (o *Order) QueryOrderitems() *OrderItemQuery {
	return NewOrderClient(o.config).QueryOrderitems(o)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return NewOrderClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", o.UserID))
	builder.WriteString(", ")
	builder.WriteString("discount=")
	builder.WriteString(fmt.Sprintf("%v", o.Discount))
	builder.WriteString(", ")
	builder.WriteString("total_amount=")
	builder.WriteString(fmt.Sprintf("%v", o.TotalAmount))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(o.Remark)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(o.Status)
	builder.WriteString(", ")
	builder.WriteString("payment_status=")
	builder.WriteString(o.PaymentStatus)
	builder.WriteString(", ")
	builder.WriteString("payment_method=")
	builder.WriteString(o.PaymentMethod)
	builder.WriteString(", ")
	builder.WriteString("delivery_status=")
	builder.WriteString(o.DeliveryStatus)
	builder.WriteString(", ")
	builder.WriteString("shipping_address=")
	builder.WriteString(o.ShippingAddress)
	builder.WriteString(", ")
	builder.WriteString("tracking_number=")
	builder.WriteString(o.TrackingNumber)
	builder.WriteString(", ")
	builder.WriteString("is_archived=")
	builder.WriteString(fmt.Sprintf("%v", o.IsArchived))
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order
