// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sthl/ent/imageinfo"
	"sthl/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Imageinfo is the model entity for the Imageinfo schema.
type Imageinfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"userId"`
	// ImgURL holds the value of the "img_url" field.
	ImgURL string `json:"imgUrl"`
	// ImgName holds the value of the "img_name" field.
	ImgName string `json:"imgName"`
	// ImgSize holds the value of the "img_size" field.
	ImgSize int64 `json:"imgSize"`
	// ImgS3IDKey holds the value of the "img_s3_id_key" field.
	ImgS3IDKey string `json:"imgS3IdKey"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImageinfoQuery when eager-loading is set.
	Edges ImageinfoEdges `json:"-"`
}

// ImageinfoEdges holds the relations/edges for other nodes in the graph.
type ImageinfoEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageinfoEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Imageinfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case imageinfo.FieldID, imageinfo.FieldImgSize:
			values[i] = new(sql.NullInt64)
		case imageinfo.FieldImgURL, imageinfo.FieldImgName, imageinfo.FieldImgS3IDKey:
			values[i] = new(sql.NullString)
		case imageinfo.FieldCreatedAt, imageinfo.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case imageinfo.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Imageinfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Imageinfo fields.
func (i *Imageinfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case imageinfo.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case imageinfo.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case imageinfo.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case imageinfo.FieldUserID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[j])
			} else if value != nil {
				i.UserID = *value
			}
		case imageinfo.FieldImgURL:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_url", values[j])
			} else if value.Valid {
				i.ImgURL = value.String
			}
		case imageinfo.FieldImgName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_name", values[j])
			} else if value.Valid {
				i.ImgName = value.String
			}
		case imageinfo.FieldImgSize:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field img_size", values[j])
			} else if value.Valid {
				i.ImgSize = value.Int64
			}
		case imageinfo.FieldImgS3IDKey:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_s3_id_key", values[j])
			} else if value.Valid {
				i.ImgS3IDKey = value.String
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Imageinfo entity.
func (i *Imageinfo) QueryOwner() *UserQuery {
	return NewImageinfoClient(i.config).QueryOwner(i)
}

// Update returns a builder for updating this Imageinfo.
// Note that you need to call Imageinfo.Unwrap() before calling this method if this Imageinfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Imageinfo) Update() *ImageinfoUpdateOne {
	return NewImageinfoClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Imageinfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Imageinfo) Unwrap() *Imageinfo {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Imageinfo is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Imageinfo) String() string {
	var builder strings.Builder
	builder.WriteString("Imageinfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", i.UserID))
	builder.WriteString(", ")
	builder.WriteString("img_url=")
	builder.WriteString(i.ImgURL)
	builder.WriteString(", ")
	builder.WriteString("img_name=")
	builder.WriteString(i.ImgName)
	builder.WriteString(", ")
	builder.WriteString("img_size=")
	builder.WriteString(fmt.Sprintf("%v", i.ImgSize))
	builder.WriteString(", ")
	builder.WriteString("img_s3_id_key=")
	builder.WriteString(i.ImgS3IDKey)
	builder.WriteByte(')')
	return builder.String()
}

// Imageinfos is a parsable slice of Imageinfo.
type Imageinfos []*Imageinfo
