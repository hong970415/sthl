// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sthl/ent/imageinfo"
	"sthl/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ImageinfoCreate is the builder for creating a Imageinfo entity.
type ImageinfoCreate struct {
	config
	mutation *ImageinfoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ic *ImageinfoCreate) SetCreatedAt(t time.Time) *ImageinfoCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *ImageinfoCreate) SetNillableCreatedAt(t *time.Time) *ImageinfoCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *ImageinfoCreate) SetUpdatedAt(t time.Time) *ImageinfoCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *ImageinfoCreate) SetNillableUpdatedAt(t *time.Time) *ImageinfoCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetUserID sets the "user_id" field.
func (ic *ImageinfoCreate) SetUserID(u uuid.UUID) *ImageinfoCreate {
	ic.mutation.SetUserID(u)
	return ic
}

// SetImgURL sets the "img_url" field.
func (ic *ImageinfoCreate) SetImgURL(s string) *ImageinfoCreate {
	ic.mutation.SetImgURL(s)
	return ic
}

// SetImgName sets the "img_name" field.
func (ic *ImageinfoCreate) SetImgName(s string) *ImageinfoCreate {
	ic.mutation.SetImgName(s)
	return ic
}

// SetImgSize sets the "img_size" field.
func (ic *ImageinfoCreate) SetImgSize(i int64) *ImageinfoCreate {
	ic.mutation.SetImgSize(i)
	return ic
}

// SetImgS3IDKey sets the "img_s3_id_key" field.
func (ic *ImageinfoCreate) SetImgS3IDKey(s string) *ImageinfoCreate {
	ic.mutation.SetImgS3IDKey(s)
	return ic
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ic *ImageinfoCreate) SetOwnerID(id uuid.UUID) *ImageinfoCreate {
	ic.mutation.SetOwnerID(id)
	return ic
}

// SetOwner sets the "owner" edge to the User entity.
func (ic *ImageinfoCreate) SetOwner(u *User) *ImageinfoCreate {
	return ic.SetOwnerID(u.ID)
}

// Mutation returns the ImageinfoMutation object of the builder.
func (ic *ImageinfoCreate) Mutation() *ImageinfoMutation {
	return ic.mutation
}

// Save creates the Imageinfo in the database.
func (ic *ImageinfoCreate) Save(ctx context.Context) (*Imageinfo, error) {
	ic.defaults()
	return withHooks[*Imageinfo, ImageinfoMutation](ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ImageinfoCreate) SaveX(ctx context.Context) *Imageinfo {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *ImageinfoCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *ImageinfoCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *ImageinfoCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := imageinfo.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := imageinfo.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ImageinfoCreate) check() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Imageinfo.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Imageinfo.updated_at"`)}
	}
	if _, ok := ic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Imageinfo.user_id"`)}
	}
	if _, ok := ic.mutation.ImgURL(); !ok {
		return &ValidationError{Name: "img_url", err: errors.New(`ent: missing required field "Imageinfo.img_url"`)}
	}
	if v, ok := ic.mutation.ImgURL(); ok {
		if err := imageinfo.ImgURLValidator(v); err != nil {
			return &ValidationError{Name: "img_url", err: fmt.Errorf(`ent: validator failed for field "Imageinfo.img_url": %w`, err)}
		}
	}
	if _, ok := ic.mutation.ImgName(); !ok {
		return &ValidationError{Name: "img_name", err: errors.New(`ent: missing required field "Imageinfo.img_name"`)}
	}
	if v, ok := ic.mutation.ImgName(); ok {
		if err := imageinfo.ImgNameValidator(v); err != nil {
			return &ValidationError{Name: "img_name", err: fmt.Errorf(`ent: validator failed for field "Imageinfo.img_name": %w`, err)}
		}
	}
	if _, ok := ic.mutation.ImgSize(); !ok {
		return &ValidationError{Name: "img_size", err: errors.New(`ent: missing required field "Imageinfo.img_size"`)}
	}
	if v, ok := ic.mutation.ImgSize(); ok {
		if err := imageinfo.ImgSizeValidator(v); err != nil {
			return &ValidationError{Name: "img_size", err: fmt.Errorf(`ent: validator failed for field "Imageinfo.img_size": %w`, err)}
		}
	}
	if _, ok := ic.mutation.ImgS3IDKey(); !ok {
		return &ValidationError{Name: "img_s3_id_key", err: errors.New(`ent: missing required field "Imageinfo.img_s3_id_key"`)}
	}
	if v, ok := ic.mutation.ImgS3IDKey(); ok {
		if err := imageinfo.ImgS3IDKeyValidator(v); err != nil {
			return &ValidationError{Name: "img_s3_id_key", err: fmt.Errorf(`ent: validator failed for field "Imageinfo.img_s3_id_key": %w`, err)}
		}
	}
	if _, ok := ic.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Imageinfo.owner"`)}
	}
	return nil
}

func (ic *ImageinfoCreate) sqlSave(ctx context.Context) (*Imageinfo, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *ImageinfoCreate) createSpec() (*Imageinfo, *sqlgraph.CreateSpec) {
	var (
		_node = &Imageinfo{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(imageinfo.Table, sqlgraph.NewFieldSpec(imageinfo.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ic.conflict
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(imageinfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(imageinfo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.ImgURL(); ok {
		_spec.SetField(imageinfo.FieldImgURL, field.TypeString, value)
		_node.ImgURL = value
	}
	if value, ok := ic.mutation.ImgName(); ok {
		_spec.SetField(imageinfo.FieldImgName, field.TypeString, value)
		_node.ImgName = value
	}
	if value, ok := ic.mutation.ImgSize(); ok {
		_spec.SetField(imageinfo.FieldImgSize, field.TypeInt64, value)
		_node.ImgSize = value
	}
	if value, ok := ic.mutation.ImgS3IDKey(); ok {
		_spec.SetField(imageinfo.FieldImgS3IDKey, field.TypeString, value)
		_node.ImgS3IDKey = value
	}
	if nodes := ic.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imageinfo.OwnerTable,
			Columns: []string{imageinfo.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Imageinfo.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ImageinfoUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ic *ImageinfoCreate) OnConflict(opts ...sql.ConflictOption) *ImageinfoUpsertOne {
	ic.conflict = opts
	return &ImageinfoUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Imageinfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *ImageinfoCreate) OnConflictColumns(columns ...string) *ImageinfoUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &ImageinfoUpsertOne{
		create: ic,
	}
}

type (
	// ImageinfoUpsertOne is the builder for "upsert"-ing
	//  one Imageinfo node.
	ImageinfoUpsertOne struct {
		create *ImageinfoCreate
	}

	// ImageinfoUpsert is the "OnConflict" setter.
	ImageinfoUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ImageinfoUpsert) SetUpdatedAt(v time.Time) *ImageinfoUpsert {
	u.Set(imageinfo.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ImageinfoUpsert) UpdateUpdatedAt() *ImageinfoUpsert {
	u.SetExcluded(imageinfo.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ImageinfoUpsert) SetUserID(v uuid.UUID) *ImageinfoUpsert {
	u.Set(imageinfo.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ImageinfoUpsert) UpdateUserID() *ImageinfoUpsert {
	u.SetExcluded(imageinfo.FieldUserID)
	return u
}

// SetImgURL sets the "img_url" field.
func (u *ImageinfoUpsert) SetImgURL(v string) *ImageinfoUpsert {
	u.Set(imageinfo.FieldImgURL, v)
	return u
}

// UpdateImgURL sets the "img_url" field to the value that was provided on create.
func (u *ImageinfoUpsert) UpdateImgURL() *ImageinfoUpsert {
	u.SetExcluded(imageinfo.FieldImgURL)
	return u
}

// SetImgName sets the "img_name" field.
func (u *ImageinfoUpsert) SetImgName(v string) *ImageinfoUpsert {
	u.Set(imageinfo.FieldImgName, v)
	return u
}

// UpdateImgName sets the "img_name" field to the value that was provided on create.
func (u *ImageinfoUpsert) UpdateImgName() *ImageinfoUpsert {
	u.SetExcluded(imageinfo.FieldImgName)
	return u
}

// SetImgSize sets the "img_size" field.
func (u *ImageinfoUpsert) SetImgSize(v int64) *ImageinfoUpsert {
	u.Set(imageinfo.FieldImgSize, v)
	return u
}

// UpdateImgSize sets the "img_size" field to the value that was provided on create.
func (u *ImageinfoUpsert) UpdateImgSize() *ImageinfoUpsert {
	u.SetExcluded(imageinfo.FieldImgSize)
	return u
}

// AddImgSize adds v to the "img_size" field.
func (u *ImageinfoUpsert) AddImgSize(v int64) *ImageinfoUpsert {
	u.Add(imageinfo.FieldImgSize, v)
	return u
}

// SetImgS3IDKey sets the "img_s3_id_key" field.
func (u *ImageinfoUpsert) SetImgS3IDKey(v string) *ImageinfoUpsert {
	u.Set(imageinfo.FieldImgS3IDKey, v)
	return u
}

// UpdateImgS3IDKey sets the "img_s3_id_key" field to the value that was provided on create.
func (u *ImageinfoUpsert) UpdateImgS3IDKey() *ImageinfoUpsert {
	u.SetExcluded(imageinfo.FieldImgS3IDKey)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Imageinfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ImageinfoUpsertOne) UpdateNewValues() *ImageinfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(imageinfo.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Imageinfo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ImageinfoUpsertOne) Ignore() *ImageinfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ImageinfoUpsertOne) DoNothing() *ImageinfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ImageinfoCreate.OnConflict
// documentation for more info.
func (u *ImageinfoUpsertOne) Update(set func(*ImageinfoUpsert)) *ImageinfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ImageinfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ImageinfoUpsertOne) SetUpdatedAt(v time.Time) *ImageinfoUpsertOne {
	return u.Update(func(s *ImageinfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ImageinfoUpsertOne) UpdateUpdatedAt() *ImageinfoUpsertOne {
	return u.Update(func(s *ImageinfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *ImageinfoUpsertOne) SetUserID(v uuid.UUID) *ImageinfoUpsertOne {
	return u.Update(func(s *ImageinfoUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ImageinfoUpsertOne) UpdateUserID() *ImageinfoUpsertOne {
	return u.Update(func(s *ImageinfoUpsert) {
		s.UpdateUserID()
	})
}

// SetImgURL sets the "img_url" field.
func (u *ImageinfoUpsertOne) SetImgURL(v string) *ImageinfoUpsertOne {
	return u.Update(func(s *ImageinfoUpsert) {
		s.SetImgURL(v)
	})
}

// UpdateImgURL sets the "img_url" field to the value that was provided on create.
func (u *ImageinfoUpsertOne) UpdateImgURL() *ImageinfoUpsertOne {
	return u.Update(func(s *ImageinfoUpsert) {
		s.UpdateImgURL()
	})
}

// SetImgName sets the "img_name" field.
func (u *ImageinfoUpsertOne) SetImgName(v string) *ImageinfoUpsertOne {
	return u.Update(func(s *ImageinfoUpsert) {
		s.SetImgName(v)
	})
}

// UpdateImgName sets the "img_name" field to the value that was provided on create.
func (u *ImageinfoUpsertOne) UpdateImgName() *ImageinfoUpsertOne {
	return u.Update(func(s *ImageinfoUpsert) {
		s.UpdateImgName()
	})
}

// SetImgSize sets the "img_size" field.
func (u *ImageinfoUpsertOne) SetImgSize(v int64) *ImageinfoUpsertOne {
	return u.Update(func(s *ImageinfoUpsert) {
		s.SetImgSize(v)
	})
}

// AddImgSize adds v to the "img_size" field.
func (u *ImageinfoUpsertOne) AddImgSize(v int64) *ImageinfoUpsertOne {
	return u.Update(func(s *ImageinfoUpsert) {
		s.AddImgSize(v)
	})
}

// UpdateImgSize sets the "img_size" field to the value that was provided on create.
func (u *ImageinfoUpsertOne) UpdateImgSize() *ImageinfoUpsertOne {
	return u.Update(func(s *ImageinfoUpsert) {
		s.UpdateImgSize()
	})
}

// SetImgS3IDKey sets the "img_s3_id_key" field.
func (u *ImageinfoUpsertOne) SetImgS3IDKey(v string) *ImageinfoUpsertOne {
	return u.Update(func(s *ImageinfoUpsert) {
		s.SetImgS3IDKey(v)
	})
}

// UpdateImgS3IDKey sets the "img_s3_id_key" field to the value that was provided on create.
func (u *ImageinfoUpsertOne) UpdateImgS3IDKey() *ImageinfoUpsertOne {
	return u.Update(func(s *ImageinfoUpsert) {
		s.UpdateImgS3IDKey()
	})
}

// Exec executes the query.
func (u *ImageinfoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ImageinfoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ImageinfoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ImageinfoUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ImageinfoUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ImageinfoCreateBulk is the builder for creating many Imageinfo entities in bulk.
type ImageinfoCreateBulk struct {
	config
	builders []*ImageinfoCreate
	conflict []sql.ConflictOption
}

// Save creates the Imageinfo entities in the database.
func (icb *ImageinfoCreateBulk) Save(ctx context.Context) ([]*Imageinfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Imageinfo, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImageinfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ImageinfoCreateBulk) SaveX(ctx context.Context) []*Imageinfo {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *ImageinfoCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *ImageinfoCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Imageinfo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ImageinfoUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (icb *ImageinfoCreateBulk) OnConflict(opts ...sql.ConflictOption) *ImageinfoUpsertBulk {
	icb.conflict = opts
	return &ImageinfoUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Imageinfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *ImageinfoCreateBulk) OnConflictColumns(columns ...string) *ImageinfoUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &ImageinfoUpsertBulk{
		create: icb,
	}
}

// ImageinfoUpsertBulk is the builder for "upsert"-ing
// a bulk of Imageinfo nodes.
type ImageinfoUpsertBulk struct {
	create *ImageinfoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Imageinfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ImageinfoUpsertBulk) UpdateNewValues() *ImageinfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(imageinfo.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Imageinfo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ImageinfoUpsertBulk) Ignore() *ImageinfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ImageinfoUpsertBulk) DoNothing() *ImageinfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ImageinfoCreateBulk.OnConflict
// documentation for more info.
func (u *ImageinfoUpsertBulk) Update(set func(*ImageinfoUpsert)) *ImageinfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ImageinfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ImageinfoUpsertBulk) SetUpdatedAt(v time.Time) *ImageinfoUpsertBulk {
	return u.Update(func(s *ImageinfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ImageinfoUpsertBulk) UpdateUpdatedAt() *ImageinfoUpsertBulk {
	return u.Update(func(s *ImageinfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *ImageinfoUpsertBulk) SetUserID(v uuid.UUID) *ImageinfoUpsertBulk {
	return u.Update(func(s *ImageinfoUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ImageinfoUpsertBulk) UpdateUserID() *ImageinfoUpsertBulk {
	return u.Update(func(s *ImageinfoUpsert) {
		s.UpdateUserID()
	})
}

// SetImgURL sets the "img_url" field.
func (u *ImageinfoUpsertBulk) SetImgURL(v string) *ImageinfoUpsertBulk {
	return u.Update(func(s *ImageinfoUpsert) {
		s.SetImgURL(v)
	})
}

// UpdateImgURL sets the "img_url" field to the value that was provided on create.
func (u *ImageinfoUpsertBulk) UpdateImgURL() *ImageinfoUpsertBulk {
	return u.Update(func(s *ImageinfoUpsert) {
		s.UpdateImgURL()
	})
}

// SetImgName sets the "img_name" field.
func (u *ImageinfoUpsertBulk) SetImgName(v string) *ImageinfoUpsertBulk {
	return u.Update(func(s *ImageinfoUpsert) {
		s.SetImgName(v)
	})
}

// UpdateImgName sets the "img_name" field to the value that was provided on create.
func (u *ImageinfoUpsertBulk) UpdateImgName() *ImageinfoUpsertBulk {
	return u.Update(func(s *ImageinfoUpsert) {
		s.UpdateImgName()
	})
}

// SetImgSize sets the "img_size" field.
func (u *ImageinfoUpsertBulk) SetImgSize(v int64) *ImageinfoUpsertBulk {
	return u.Update(func(s *ImageinfoUpsert) {
		s.SetImgSize(v)
	})
}

// AddImgSize adds v to the "img_size" field.
func (u *ImageinfoUpsertBulk) AddImgSize(v int64) *ImageinfoUpsertBulk {
	return u.Update(func(s *ImageinfoUpsert) {
		s.AddImgSize(v)
	})
}

// UpdateImgSize sets the "img_size" field to the value that was provided on create.
func (u *ImageinfoUpsertBulk) UpdateImgSize() *ImageinfoUpsertBulk {
	return u.Update(func(s *ImageinfoUpsert) {
		s.UpdateImgSize()
	})
}

// SetImgS3IDKey sets the "img_s3_id_key" field.
func (u *ImageinfoUpsertBulk) SetImgS3IDKey(v string) *ImageinfoUpsertBulk {
	return u.Update(func(s *ImageinfoUpsert) {
		s.SetImgS3IDKey(v)
	})
}

// UpdateImgS3IDKey sets the "img_s3_id_key" field to the value that was provided on create.
func (u *ImageinfoUpsertBulk) UpdateImgS3IDKey() *ImageinfoUpsertBulk {
	return u.Update(func(s *ImageinfoUpsert) {
		s.UpdateImgS3IDKey()
	})
}

// Exec executes the query.
func (u *ImageinfoUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ImageinfoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ImageinfoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ImageinfoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
