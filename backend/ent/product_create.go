// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sthl/ent/product"
	"sthl/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProductCreate) SetCreatedAt(t time.Time) *ProductCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCreatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProductCreate) SetUpdatedAt(t time.Time) *ProductCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableUpdatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetUserID sets the "user_id" field.
func (pc *ProductCreate) SetUserID(u uuid.UUID) *ProductCreate {
	pc.mutation.SetUserID(u)
	return pc
}

// SetName sets the "name" field.
func (pc *ProductCreate) SetName(s string) *ProductCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetPrice sets the "price" field.
func (pc *ProductCreate) SetPrice(f float64) *ProductCreate {
	pc.mutation.SetPrice(f)
	return pc
}

// SetQuantity sets the "quantity" field.
func (pc *ProductCreate) SetQuantity(i int32) *ProductCreate {
	pc.mutation.SetQuantity(i)
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProductCreate) SetDescription(s string) *ProductCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetStatus sets the "status" field.
func (pc *ProductCreate) SetStatus(s string) *ProductCreate {
	pc.mutation.SetStatus(s)
	return pc
}

// SetIsArchived sets the "is_archived" field.
func (pc *ProductCreate) SetIsArchived(b bool) *ProductCreate {
	pc.mutation.SetIsArchived(b)
	return pc
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (pc *ProductCreate) SetNillableIsArchived(b *bool) *ProductCreate {
	if b != nil {
		pc.SetIsArchived(*b)
	}
	return pc
}

// SetImgURL sets the "img_url" field.
func (pc *ProductCreate) SetImgURL(s string) *ProductCreate {
	pc.mutation.SetImgURL(s)
	return pc
}

// SetNillableImgURL sets the "img_url" field if the given value is not nil.
func (pc *ProductCreate) SetNillableImgURL(s *string) *ProductCreate {
	if s != nil {
		pc.SetImgURL(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProductCreate) SetID(u uuid.UUID) *ProductCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableID(u *uuid.UUID) *ProductCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (pc *ProductCreate) SetOwnerID(id uuid.UUID) *ProductCreate {
	pc.mutation.SetOwnerID(id)
	return pc
}

// SetOwner sets the "owner" edge to the User entity.
func (pc *ProductCreate) SetOwner(u *User) *ProductCreate {
	return pc.SetOwnerID(u.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	pc.defaults()
	return withHooks[*Product, ProductMutation](ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProductCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := product.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := product.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.IsArchived(); !ok {
		v := product.DefaultIsArchived
		pc.mutation.SetIsArchived(v)
	}
	if _, ok := pc.mutation.ImgURL(); !ok {
		v := product.DefaultImgURL
		pc.mutation.SetImgURL(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := product.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Product.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Product.updated_at"`)}
	}
	if _, ok := pc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Product.user_id"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Product.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Product.price"`)}
	}
	if v, ok := pc.mutation.Price(); ok {
		if err := product.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Product.price": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "Product.quantity"`)}
	}
	if v, ok := pc.mutation.Quantity(); ok {
		if err := product.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "Product.quantity": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Product.description"`)}
	}
	if v, ok := pc.mutation.Description(); ok {
		if err := product.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Product.description": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Product.status"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := product.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Product.status": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IsArchived(); !ok {
		return &ValidationError{Name: "is_archived", err: errors.New(`ent: missing required field "Product.is_archived"`)}
	}
	if _, ok := pc.mutation.ImgURL(); !ok {
		return &ValidationError{Name: "img_url", err: errors.New(`ent: missing required field "Product.img_url"`)}
	}
	if v, ok := pc.mutation.ImgURL(); ok {
		if err := product.ImgURLValidator(v); err != nil {
			return &ValidationError{Name: "img_url", err: fmt.Errorf(`ent: validator failed for field "Product.img_url": %w`, err)}
		}
	}
	if _, ok := pc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Product.owner"`)}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(product.Table, sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := pc.mutation.Quantity(); ok {
		_spec.SetField(product.FieldQuantity, field.TypeInt32, value)
		_node.Quantity = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.IsArchived(); ok {
		_spec.SetField(product.FieldIsArchived, field.TypeBool, value)
		_node.IsArchived = value
	}
	if value, ok := pc.mutation.ImgURL(); ok {
		_spec.SetField(product.FieldImgURL, field.TypeString, value)
		_node.ImgURL = value
	}
	if nodes := pc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.OwnerTable,
			Columns: []string{product.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Product.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *ProductCreate) OnConflict(opts ...sql.ConflictOption) *ProductUpsertOne {
	pc.conflict = opts
	return &ProductUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProductCreate) OnConflictColumns(columns ...string) *ProductUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProductUpsertOne{
		create: pc,
	}
}

type (
	// ProductUpsertOne is the builder for "upsert"-ing
	//  one Product node.
	ProductUpsertOne struct {
		create *ProductCreate
	}

	// ProductUpsert is the "OnConflict" setter.
	ProductUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsert) SetUpdatedAt(v time.Time) *ProductUpsert {
	u.Set(product.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsert) UpdateUpdatedAt() *ProductUpsert {
	u.SetExcluded(product.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ProductUpsert) SetUserID(v uuid.UUID) *ProductUpsert {
	u.Set(product.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ProductUpsert) UpdateUserID() *ProductUpsert {
	u.SetExcluded(product.FieldUserID)
	return u
}

// SetName sets the "name" field.
func (u *ProductUpsert) SetName(v string) *ProductUpsert {
	u.Set(product.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProductUpsert) UpdateName() *ProductUpsert {
	u.SetExcluded(product.FieldName)
	return u
}

// SetPrice sets the "price" field.
func (u *ProductUpsert) SetPrice(v float64) *ProductUpsert {
	u.Set(product.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *ProductUpsert) UpdatePrice() *ProductUpsert {
	u.SetExcluded(product.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *ProductUpsert) AddPrice(v float64) *ProductUpsert {
	u.Add(product.FieldPrice, v)
	return u
}

// SetQuantity sets the "quantity" field.
func (u *ProductUpsert) SetQuantity(v int32) *ProductUpsert {
	u.Set(product.FieldQuantity, v)
	return u
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *ProductUpsert) UpdateQuantity() *ProductUpsert {
	u.SetExcluded(product.FieldQuantity)
	return u
}

// AddQuantity adds v to the "quantity" field.
func (u *ProductUpsert) AddQuantity(v int32) *ProductUpsert {
	u.Add(product.FieldQuantity, v)
	return u
}

// SetDescription sets the "description" field.
func (u *ProductUpsert) SetDescription(v string) *ProductUpsert {
	u.Set(product.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProductUpsert) UpdateDescription() *ProductUpsert {
	u.SetExcluded(product.FieldDescription)
	return u
}

// SetStatus sets the "status" field.
func (u *ProductUpsert) SetStatus(v string) *ProductUpsert {
	u.Set(product.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProductUpsert) UpdateStatus() *ProductUpsert {
	u.SetExcluded(product.FieldStatus)
	return u
}

// SetIsArchived sets the "is_archived" field.
func (u *ProductUpsert) SetIsArchived(v bool) *ProductUpsert {
	u.Set(product.FieldIsArchived, v)
	return u
}

// UpdateIsArchived sets the "is_archived" field to the value that was provided on create.
func (u *ProductUpsert) UpdateIsArchived() *ProductUpsert {
	u.SetExcluded(product.FieldIsArchived)
	return u
}

// SetImgURL sets the "img_url" field.
func (u *ProductUpsert) SetImgURL(v string) *ProductUpsert {
	u.Set(product.FieldImgURL, v)
	return u
}

// UpdateImgURL sets the "img_url" field to the value that was provided on create.
func (u *ProductUpsert) UpdateImgURL() *ProductUpsert {
	u.SetExcluded(product.FieldImgURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(product.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProductUpsertOne) UpdateNewValues() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(product.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(product.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProductUpsertOne) Ignore() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductUpsertOne) DoNothing() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductCreate.OnConflict
// documentation for more info.
func (u *ProductUpsertOne) Update(set func(*ProductUpsert)) *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsertOne) SetUpdatedAt(v time.Time) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateUpdatedAt() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *ProductUpsertOne) SetUserID(v uuid.UUID) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateUserID() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUserID()
	})
}

// SetName sets the "name" field.
func (u *ProductUpsertOne) SetName(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateName() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateName()
	})
}

// SetPrice sets the "price" field.
func (u *ProductUpsertOne) SetPrice(v float64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *ProductUpsertOne) AddPrice(v float64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdatePrice() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdatePrice()
	})
}

// SetQuantity sets the "quantity" field.
func (u *ProductUpsertOne) SetQuantity(v int32) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetQuantity(v)
	})
}

// AddQuantity adds v to the "quantity" field.
func (u *ProductUpsertOne) AddQuantity(v int32) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateQuantity() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateQuantity()
	})
}

// SetDescription sets the "description" field.
func (u *ProductUpsertOne) SetDescription(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateDescription() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDescription()
	})
}

// SetStatus sets the "status" field.
func (u *ProductUpsertOne) SetStatus(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateStatus() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateStatus()
	})
}

// SetIsArchived sets the "is_archived" field.
func (u *ProductUpsertOne) SetIsArchived(v bool) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetIsArchived(v)
	})
}

// UpdateIsArchived sets the "is_archived" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateIsArchived() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateIsArchived()
	})
}

// SetImgURL sets the "img_url" field.
func (u *ProductUpsertOne) SetImgURL(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetImgURL(v)
	})
}

// UpdateImgURL sets the "img_url" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateImgURL() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateImgURL()
	})
}

// Exec executes the query.
func (u *ProductUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProductCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProductUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProductUpsertOne.ID is not supported by MySQL driver. Use ProductUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProductUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	builders []*ProductCreate
	conflict []sql.ConflictOption
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Product.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProductCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProductUpsertBulk {
	pcb.conflict = opts
	return &ProductUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProductCreateBulk) OnConflictColumns(columns ...string) *ProductUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProductUpsertBulk{
		create: pcb,
	}
}

// ProductUpsertBulk is the builder for "upsert"-ing
// a bulk of Product nodes.
type ProductUpsertBulk struct {
	create *ProductCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(product.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProductUpsertBulk) UpdateNewValues() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(product.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(product.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProductUpsertBulk) Ignore() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductUpsertBulk) DoNothing() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductCreateBulk.OnConflict
// documentation for more info.
func (u *ProductUpsertBulk) Update(set func(*ProductUpsert)) *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsertBulk) SetUpdatedAt(v time.Time) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateUpdatedAt() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *ProductUpsertBulk) SetUserID(v uuid.UUID) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateUserID() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUserID()
	})
}

// SetName sets the "name" field.
func (u *ProductUpsertBulk) SetName(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateName() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateName()
	})
}

// SetPrice sets the "price" field.
func (u *ProductUpsertBulk) SetPrice(v float64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *ProductUpsertBulk) AddPrice(v float64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdatePrice() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdatePrice()
	})
}

// SetQuantity sets the "quantity" field.
func (u *ProductUpsertBulk) SetQuantity(v int32) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetQuantity(v)
	})
}

// AddQuantity adds v to the "quantity" field.
func (u *ProductUpsertBulk) AddQuantity(v int32) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateQuantity() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateQuantity()
	})
}

// SetDescription sets the "description" field.
func (u *ProductUpsertBulk) SetDescription(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateDescription() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDescription()
	})
}

// SetStatus sets the "status" field.
func (u *ProductUpsertBulk) SetStatus(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateStatus() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateStatus()
	})
}

// SetIsArchived sets the "is_archived" field.
func (u *ProductUpsertBulk) SetIsArchived(v bool) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetIsArchived(v)
	})
}

// UpdateIsArchived sets the "is_archived" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateIsArchived() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateIsArchived()
	})
}

// SetImgURL sets the "img_url" field.
func (u *ProductUpsertBulk) SetImgURL(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetImgURL(v)
	})
}

// UpdateImgURL sets the "img_url" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateImgURL() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateImgURL()
	})
}

// Exec executes the query.
func (u *ProductUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProductCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProductCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
