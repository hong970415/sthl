// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sthl/ent/order"
	"sthl/ent/orderitem"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OrderItemCreate is the builder for creating a OrderItem entity.
type OrderItemCreate struct {
	config
	mutation *OrderItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOrderID sets the "order_id" field.
func (oic *OrderItemCreate) SetOrderID(u uuid.UUID) *OrderItemCreate {
	oic.mutation.SetOrderID(u)
	return oic
}

// SetProductID sets the "product_id" field.
func (oic *OrderItemCreate) SetProductID(u uuid.UUID) *OrderItemCreate {
	oic.mutation.SetProductID(u)
	return oic
}

// SetPurchasedName sets the "purchased_name" field.
func (oic *OrderItemCreate) SetPurchasedName(s string) *OrderItemCreate {
	oic.mutation.SetPurchasedName(s)
	return oic
}

// SetPurchasedPrice sets the "purchased_price" field.
func (oic *OrderItemCreate) SetPurchasedPrice(f float64) *OrderItemCreate {
	oic.mutation.SetPurchasedPrice(f)
	return oic
}

// SetQuantity sets the "quantity" field.
func (oic *OrderItemCreate) SetQuantity(i int) *OrderItemCreate {
	oic.mutation.SetQuantity(i)
	return oic
}

// SetID sets the "id" field.
func (oic *OrderItemCreate) SetID(u uuid.UUID) *OrderItemCreate {
	oic.mutation.SetID(u)
	return oic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableID(u *uuid.UUID) *OrderItemCreate {
	if u != nil {
		oic.SetID(*u)
	}
	return oic
}

// SetOwnerID sets the "owner" edge to the Order entity by ID.
func (oic *OrderItemCreate) SetOwnerID(id uuid.UUID) *OrderItemCreate {
	oic.mutation.SetOwnerID(id)
	return oic
}

// SetOwner sets the "owner" edge to the Order entity.
func (oic *OrderItemCreate) SetOwner(o *Order) *OrderItemCreate {
	return oic.SetOwnerID(o.ID)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oic *OrderItemCreate) Mutation() *OrderItemMutation {
	return oic.mutation
}

// Save creates the OrderItem in the database.
func (oic *OrderItemCreate) Save(ctx context.Context) (*OrderItem, error) {
	oic.defaults()
	return withHooks[*OrderItem, OrderItemMutation](ctx, oic.sqlSave, oic.mutation, oic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oic *OrderItemCreate) SaveX(ctx context.Context) *OrderItem {
	v, err := oic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oic *OrderItemCreate) Exec(ctx context.Context) error {
	_, err := oic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oic *OrderItemCreate) ExecX(ctx context.Context) {
	if err := oic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oic *OrderItemCreate) defaults() {
	if _, ok := oic.mutation.ID(); !ok {
		v := orderitem.DefaultID()
		oic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oic *OrderItemCreate) check() error {
	if _, ok := oic.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "OrderItem.order_id"`)}
	}
	if _, ok := oic.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`ent: missing required field "OrderItem.product_id"`)}
	}
	if _, ok := oic.mutation.PurchasedName(); !ok {
		return &ValidationError{Name: "purchased_name", err: errors.New(`ent: missing required field "OrderItem.purchased_name"`)}
	}
	if v, ok := oic.mutation.PurchasedName(); ok {
		if err := orderitem.PurchasedNameValidator(v); err != nil {
			return &ValidationError{Name: "purchased_name", err: fmt.Errorf(`ent: validator failed for field "OrderItem.purchased_name": %w`, err)}
		}
	}
	if _, ok := oic.mutation.PurchasedPrice(); !ok {
		return &ValidationError{Name: "purchased_price", err: errors.New(`ent: missing required field "OrderItem.purchased_price"`)}
	}
	if v, ok := oic.mutation.PurchasedPrice(); ok {
		if err := orderitem.PurchasedPriceValidator(v); err != nil {
			return &ValidationError{Name: "purchased_price", err: fmt.Errorf(`ent: validator failed for field "OrderItem.purchased_price": %w`, err)}
		}
	}
	if _, ok := oic.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "OrderItem.quantity"`)}
	}
	if v, ok := oic.mutation.Quantity(); ok {
		if err := orderitem.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "OrderItem.quantity": %w`, err)}
		}
	}
	if _, ok := oic.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "OrderItem.owner"`)}
	}
	return nil
}

func (oic *OrderItemCreate) sqlSave(ctx context.Context) (*OrderItem, error) {
	if err := oic.check(); err != nil {
		return nil, err
	}
	_node, _spec := oic.createSpec()
	if err := sqlgraph.CreateNode(ctx, oic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oic.mutation.id = &_node.ID
	oic.mutation.done = true
	return _node, nil
}

func (oic *OrderItemCreate) createSpec() (*OrderItem, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderItem{config: oic.config}
		_spec = sqlgraph.NewCreateSpec(orderitem.Table, sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = oic.conflict
	if id, ok := oic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oic.mutation.ProductID(); ok {
		_spec.SetField(orderitem.FieldProductID, field.TypeUUID, value)
		_node.ProductID = value
	}
	if value, ok := oic.mutation.PurchasedName(); ok {
		_spec.SetField(orderitem.FieldPurchasedName, field.TypeString, value)
		_node.PurchasedName = value
	}
	if value, ok := oic.mutation.PurchasedPrice(); ok {
		_spec.SetField(orderitem.FieldPurchasedPrice, field.TypeFloat64, value)
		_node.PurchasedPrice = value
	}
	if value, ok := oic.mutation.Quantity(); ok {
		_spec.SetField(orderitem.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if nodes := oic.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OwnerTable,
			Columns: []string{orderitem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderItem.Create().
//		SetOrderID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderItemUpsert) {
//			SetOrderID(v+v).
//		}).
//		Exec(ctx)
func (oic *OrderItemCreate) OnConflict(opts ...sql.ConflictOption) *OrderItemUpsertOne {
	oic.conflict = opts
	return &OrderItemUpsertOne{
		create: oic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oic *OrderItemCreate) OnConflictColumns(columns ...string) *OrderItemUpsertOne {
	oic.conflict = append(oic.conflict, sql.ConflictColumns(columns...))
	return &OrderItemUpsertOne{
		create: oic,
	}
}

type (
	// OrderItemUpsertOne is the builder for "upsert"-ing
	//  one OrderItem node.
	OrderItemUpsertOne struct {
		create *OrderItemCreate
	}

	// OrderItemUpsert is the "OnConflict" setter.
	OrderItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetOrderID sets the "order_id" field.
func (u *OrderItemUpsert) SetOrderID(v uuid.UUID) *OrderItemUpsert {
	u.Set(orderitem.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateOrderID() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldOrderID)
	return u
}

// SetProductID sets the "product_id" field.
func (u *OrderItemUpsert) SetProductID(v uuid.UUID) *OrderItemUpsert {
	u.Set(orderitem.FieldProductID, v)
	return u
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateProductID() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldProductID)
	return u
}

// SetPurchasedName sets the "purchased_name" field.
func (u *OrderItemUpsert) SetPurchasedName(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldPurchasedName, v)
	return u
}

// UpdatePurchasedName sets the "purchased_name" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdatePurchasedName() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldPurchasedName)
	return u
}

// SetPurchasedPrice sets the "purchased_price" field.
func (u *OrderItemUpsert) SetPurchasedPrice(v float64) *OrderItemUpsert {
	u.Set(orderitem.FieldPurchasedPrice, v)
	return u
}

// UpdatePurchasedPrice sets the "purchased_price" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdatePurchasedPrice() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldPurchasedPrice)
	return u
}

// AddPurchasedPrice adds v to the "purchased_price" field.
func (u *OrderItemUpsert) AddPurchasedPrice(v float64) *OrderItemUpsert {
	u.Add(orderitem.FieldPurchasedPrice, v)
	return u
}

// SetQuantity sets the "quantity" field.
func (u *OrderItemUpsert) SetQuantity(v int) *OrderItemUpsert {
	u.Set(orderitem.FieldQuantity, v)
	return u
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateQuantity() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldQuantity)
	return u
}

// AddQuantity adds v to the "quantity" field.
func (u *OrderItemUpsert) AddQuantity(v int) *OrderItemUpsert {
	u.Add(orderitem.FieldQuantity, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderItemUpsertOne) UpdateNewValues() *OrderItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderitem.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderItemUpsertOne) Ignore() *OrderItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderItemUpsertOne) DoNothing() *OrderItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderItemCreate.OnConflict
// documentation for more info.
func (u *OrderItemUpsertOne) Update(set func(*OrderItemUpsert)) *OrderItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderItemUpsertOne) SetOrderID(v uuid.UUID) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateOrderID() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateOrderID()
	})
}

// SetProductID sets the "product_id" field.
func (u *OrderItemUpsertOne) SetProductID(v uuid.UUID) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateProductID() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateProductID()
	})
}

// SetPurchasedName sets the "purchased_name" field.
func (u *OrderItemUpsertOne) SetPurchasedName(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetPurchasedName(v)
	})
}

// UpdatePurchasedName sets the "purchased_name" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdatePurchasedName() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdatePurchasedName()
	})
}

// SetPurchasedPrice sets the "purchased_price" field.
func (u *OrderItemUpsertOne) SetPurchasedPrice(v float64) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetPurchasedPrice(v)
	})
}

// AddPurchasedPrice adds v to the "purchased_price" field.
func (u *OrderItemUpsertOne) AddPurchasedPrice(v float64) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddPurchasedPrice(v)
	})
}

// UpdatePurchasedPrice sets the "purchased_price" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdatePurchasedPrice() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdatePurchasedPrice()
	})
}

// SetQuantity sets the "quantity" field.
func (u *OrderItemUpsertOne) SetQuantity(v int) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetQuantity(v)
	})
}

// AddQuantity adds v to the "quantity" field.
func (u *OrderItemUpsertOne) AddQuantity(v int) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateQuantity() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateQuantity()
	})
}

// Exec executes the query.
func (u *OrderItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderItemUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OrderItemUpsertOne.ID is not supported by MySQL driver. Use OrderItemUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderItemUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderItemCreateBulk is the builder for creating many OrderItem entities in bulk.
type OrderItemCreateBulk struct {
	config
	builders []*OrderItemCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderItem entities in the database.
func (oicb *OrderItemCreateBulk) Save(ctx context.Context) ([]*OrderItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oicb.builders))
	nodes := make([]*OrderItem, len(oicb.builders))
	mutators := make([]Mutator, len(oicb.builders))
	for i := range oicb.builders {
		func(i int, root context.Context) {
			builder := oicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oicb *OrderItemCreateBulk) SaveX(ctx context.Context) []*OrderItem {
	v, err := oicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oicb *OrderItemCreateBulk) Exec(ctx context.Context) error {
	_, err := oicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oicb *OrderItemCreateBulk) ExecX(ctx context.Context) {
	if err := oicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderItemUpsert) {
//			SetOrderID(v+v).
//		}).
//		Exec(ctx)
func (oicb *OrderItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderItemUpsertBulk {
	oicb.conflict = opts
	return &OrderItemUpsertBulk{
		create: oicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oicb *OrderItemCreateBulk) OnConflictColumns(columns ...string) *OrderItemUpsertBulk {
	oicb.conflict = append(oicb.conflict, sql.ConflictColumns(columns...))
	return &OrderItemUpsertBulk{
		create: oicb,
	}
}

// OrderItemUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderItem nodes.
type OrderItemUpsertBulk struct {
	create *OrderItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderItemUpsertBulk) UpdateNewValues() *OrderItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderitem.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderItemUpsertBulk) Ignore() *OrderItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderItemUpsertBulk) DoNothing() *OrderItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderItemCreateBulk.OnConflict
// documentation for more info.
func (u *OrderItemUpsertBulk) Update(set func(*OrderItemUpsert)) *OrderItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderItemUpsertBulk) SetOrderID(v uuid.UUID) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateOrderID() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateOrderID()
	})
}

// SetProductID sets the "product_id" field.
func (u *OrderItemUpsertBulk) SetProductID(v uuid.UUID) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateProductID() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateProductID()
	})
}

// SetPurchasedName sets the "purchased_name" field.
func (u *OrderItemUpsertBulk) SetPurchasedName(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetPurchasedName(v)
	})
}

// UpdatePurchasedName sets the "purchased_name" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdatePurchasedName() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdatePurchasedName()
	})
}

// SetPurchasedPrice sets the "purchased_price" field.
func (u *OrderItemUpsertBulk) SetPurchasedPrice(v float64) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetPurchasedPrice(v)
	})
}

// AddPurchasedPrice adds v to the "purchased_price" field.
func (u *OrderItemUpsertBulk) AddPurchasedPrice(v float64) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddPurchasedPrice(v)
	})
}

// UpdatePurchasedPrice sets the "purchased_price" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdatePurchasedPrice() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdatePurchasedPrice()
	})
}

// SetQuantity sets the "quantity" field.
func (u *OrderItemUpsertBulk) SetQuantity(v int) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetQuantity(v)
	})
}

// AddQuantity adds v to the "quantity" field.
func (u *OrderItemUpsertBulk) AddQuantity(v int) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateQuantity() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateQuantity()
	})
}

// Exec executes the query.
func (u *OrderItemUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
