// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sthl/ent/order"
	"sthl/ent/orderitem"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// OrderItem is the model entity for the OrderItem schema.
type OrderItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"orderId"`
	// ProductID holds the value of the "product_id" field.
	ProductID uuid.UUID `json:"productId"`
	// PurchasedName holds the value of the "purchased_name" field.
	PurchasedName string `json:"purchasedName"`
	// PurchasedPrice holds the value of the "purchased_price" field.
	PurchasedPrice float64 `json:"purchasedPrice"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderItemQuery when eager-loading is set.
	Edges OrderItemEdges `json:"-"`
}

// OrderItemEdges holds the relations/edges for other nodes in the graph.
type OrderItemEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Order `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderItemEdges) OwnerOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderitem.FieldPurchasedPrice:
			values[i] = new(sql.NullFloat64)
		case orderitem.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case orderitem.FieldPurchasedName:
			values[i] = new(sql.NullString)
		case orderitem.FieldID, orderitem.FieldOrderID, orderitem.FieldProductID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderItem fields.
func (oi *OrderItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderitem.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				oi.ID = *value
			}
		case orderitem.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				oi.OrderID = *value
			}
		case orderitem.FieldProductID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value != nil {
				oi.ProductID = *value
			}
		case orderitem.FieldPurchasedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field purchased_name", values[i])
			} else if value.Valid {
				oi.PurchasedName = value.String
			}
		case orderitem.FieldPurchasedPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field purchased_price", values[i])
			} else if value.Valid {
				oi.PurchasedPrice = value.Float64
			}
		case orderitem.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				oi.Quantity = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the OrderItem entity.
func (oi *OrderItem) QueryOwner() *OrderQuery {
	return NewOrderItemClient(oi.config).QueryOwner(oi)
}

// Update returns a builder for updating this OrderItem.
// Note that you need to call OrderItem.Unwrap() before calling this method if this OrderItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (oi *OrderItem) Update() *OrderItemUpdateOne {
	return NewOrderItemClient(oi.config).UpdateOne(oi)
}

// Unwrap unwraps the OrderItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oi *OrderItem) Unwrap() *OrderItem {
	_tx, ok := oi.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderItem is not a transactional entity")
	}
	oi.config.driver = _tx.drv
	return oi
}

// String implements the fmt.Stringer.
func (oi *OrderItem) String() string {
	var builder strings.Builder
	builder.WriteString("OrderItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oi.ID))
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", oi.OrderID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", oi.ProductID))
	builder.WriteString(", ")
	builder.WriteString("purchased_name=")
	builder.WriteString(oi.PurchasedName)
	builder.WriteString(", ")
	builder.WriteString("purchased_price=")
	builder.WriteString(fmt.Sprintf("%v", oi.PurchasedPrice))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", oi.Quantity))
	builder.WriteByte(')')
	return builder.String()
}

// OrderItems is a parsable slice of OrderItem.
type OrderItems []*OrderItem
