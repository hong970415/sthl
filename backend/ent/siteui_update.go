// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sthl/ent/predicate"
	"sthl/ent/siteui"
	"sthl/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SiteuiUpdate is the builder for updating Siteui entities.
type SiteuiUpdate struct {
	config
	hooks    []Hook
	mutation *SiteuiMutation
}

// Where appends a list predicates to the SiteuiUpdate builder.
func (su *SiteuiUpdate) Where(ps ...predicate.Siteui) *SiteuiUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SiteuiUpdate) SetUpdatedAt(t time.Time) *SiteuiUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetUserID sets the "user_id" field.
func (su *SiteuiUpdate) SetUserID(u uuid.UUID) *SiteuiUpdate {
	su.mutation.SetUserID(u)
	return su
}

// SetSitename sets the "sitename" field.
func (su *SiteuiUpdate) SetSitename(s string) *SiteuiUpdate {
	su.mutation.SetSitename(s)
	return su
}

// SetHomepageImgUrl sets the "homepageImgUrl" field.
func (su *SiteuiUpdate) SetHomepageImgUrl(s string) *SiteuiUpdate {
	su.mutation.SetHomepageImgUrl(s)
	return su
}

// SetNillableHomepageImgUrl sets the "homepageImgUrl" field if the given value is not nil.
func (su *SiteuiUpdate) SetNillableHomepageImgUrl(s *string) *SiteuiUpdate {
	if s != nil {
		su.SetHomepageImgUrl(*s)
	}
	return su
}

// SetHomepageText sets the "homepageText" field.
func (su *SiteuiUpdate) SetHomepageText(s string) *SiteuiUpdate {
	su.mutation.SetHomepageText(s)
	return su
}

// SetHomepageTextColor sets the "homepageTextColor" field.
func (su *SiteuiUpdate) SetHomepageTextColor(s string) *SiteuiUpdate {
	su.mutation.SetHomepageTextColor(s)
	return su
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (su *SiteuiUpdate) SetOwnerID(id uuid.UUID) *SiteuiUpdate {
	su.mutation.SetOwnerID(id)
	return su
}

// SetOwner sets the "owner" edge to the User entity.
func (su *SiteuiUpdate) SetOwner(u *User) *SiteuiUpdate {
	return su.SetOwnerID(u.ID)
}

// Mutation returns the SiteuiMutation object of the builder.
func (su *SiteuiUpdate) Mutation() *SiteuiMutation {
	return su.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (su *SiteuiUpdate) ClearOwner() *SiteuiUpdate {
	su.mutation.ClearOwner()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SiteuiUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks[int, SiteuiMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SiteuiUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SiteuiUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SiteuiUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SiteuiUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := siteui.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SiteuiUpdate) check() error {
	if v, ok := su.mutation.Sitename(); ok {
		if err := siteui.SitenameValidator(v); err != nil {
			return &ValidationError{Name: "sitename", err: fmt.Errorf(`ent: validator failed for field "Siteui.sitename": %w`, err)}
		}
	}
	if v, ok := su.mutation.HomepageImgUrl(); ok {
		if err := siteui.HomepageImgUrlValidator(v); err != nil {
			return &ValidationError{Name: "homepageImgUrl", err: fmt.Errorf(`ent: validator failed for field "Siteui.homepageImgUrl": %w`, err)}
		}
	}
	if v, ok := su.mutation.HomepageText(); ok {
		if err := siteui.HomepageTextValidator(v); err != nil {
			return &ValidationError{Name: "homepageText", err: fmt.Errorf(`ent: validator failed for field "Siteui.homepageText": %w`, err)}
		}
	}
	if v, ok := su.mutation.HomepageTextColor(); ok {
		if err := siteui.HomepageTextColorValidator(v); err != nil {
			return &ValidationError{Name: "homepageTextColor", err: fmt.Errorf(`ent: validator failed for field "Siteui.homepageTextColor": %w`, err)}
		}
	}
	if _, ok := su.mutation.OwnerID(); su.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Siteui.owner"`)
	}
	return nil
}

func (su *SiteuiUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(siteui.Table, siteui.Columns, sqlgraph.NewFieldSpec(siteui.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(siteui.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Sitename(); ok {
		_spec.SetField(siteui.FieldSitename, field.TypeString, value)
	}
	if value, ok := su.mutation.HomepageImgUrl(); ok {
		_spec.SetField(siteui.FieldHomepageImgUrl, field.TypeString, value)
	}
	if value, ok := su.mutation.HomepageText(); ok {
		_spec.SetField(siteui.FieldHomepageText, field.TypeString, value)
	}
	if value, ok := su.mutation.HomepageTextColor(); ok {
		_spec.SetField(siteui.FieldHomepageTextColor, field.TypeString, value)
	}
	if su.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   siteui.OwnerTable,
			Columns: []string{siteui.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   siteui.OwnerTable,
			Columns: []string{siteui.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{siteui.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SiteuiUpdateOne is the builder for updating a single Siteui entity.
type SiteuiUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SiteuiMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SiteuiUpdateOne) SetUpdatedAt(t time.Time) *SiteuiUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetUserID sets the "user_id" field.
func (suo *SiteuiUpdateOne) SetUserID(u uuid.UUID) *SiteuiUpdateOne {
	suo.mutation.SetUserID(u)
	return suo
}

// SetSitename sets the "sitename" field.
func (suo *SiteuiUpdateOne) SetSitename(s string) *SiteuiUpdateOne {
	suo.mutation.SetSitename(s)
	return suo
}

// SetHomepageImgUrl sets the "homepageImgUrl" field.
func (suo *SiteuiUpdateOne) SetHomepageImgUrl(s string) *SiteuiUpdateOne {
	suo.mutation.SetHomepageImgUrl(s)
	return suo
}

// SetNillableHomepageImgUrl sets the "homepageImgUrl" field if the given value is not nil.
func (suo *SiteuiUpdateOne) SetNillableHomepageImgUrl(s *string) *SiteuiUpdateOne {
	if s != nil {
		suo.SetHomepageImgUrl(*s)
	}
	return suo
}

// SetHomepageText sets the "homepageText" field.
func (suo *SiteuiUpdateOne) SetHomepageText(s string) *SiteuiUpdateOne {
	suo.mutation.SetHomepageText(s)
	return suo
}

// SetHomepageTextColor sets the "homepageTextColor" field.
func (suo *SiteuiUpdateOne) SetHomepageTextColor(s string) *SiteuiUpdateOne {
	suo.mutation.SetHomepageTextColor(s)
	return suo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (suo *SiteuiUpdateOne) SetOwnerID(id uuid.UUID) *SiteuiUpdateOne {
	suo.mutation.SetOwnerID(id)
	return suo
}

// SetOwner sets the "owner" edge to the User entity.
func (suo *SiteuiUpdateOne) SetOwner(u *User) *SiteuiUpdateOne {
	return suo.SetOwnerID(u.ID)
}

// Mutation returns the SiteuiMutation object of the builder.
func (suo *SiteuiUpdateOne) Mutation() *SiteuiMutation {
	return suo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (suo *SiteuiUpdateOne) ClearOwner() *SiteuiUpdateOne {
	suo.mutation.ClearOwner()
	return suo
}

// Where appends a list predicates to the SiteuiUpdate builder.
func (suo *SiteuiUpdateOne) Where(ps ...predicate.Siteui) *SiteuiUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SiteuiUpdateOne) Select(field string, fields ...string) *SiteuiUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Siteui entity.
func (suo *SiteuiUpdateOne) Save(ctx context.Context) (*Siteui, error) {
	suo.defaults()
	return withHooks[*Siteui, SiteuiMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SiteuiUpdateOne) SaveX(ctx context.Context) *Siteui {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SiteuiUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SiteuiUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SiteuiUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := siteui.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SiteuiUpdateOne) check() error {
	if v, ok := suo.mutation.Sitename(); ok {
		if err := siteui.SitenameValidator(v); err != nil {
			return &ValidationError{Name: "sitename", err: fmt.Errorf(`ent: validator failed for field "Siteui.sitename": %w`, err)}
		}
	}
	if v, ok := suo.mutation.HomepageImgUrl(); ok {
		if err := siteui.HomepageImgUrlValidator(v); err != nil {
			return &ValidationError{Name: "homepageImgUrl", err: fmt.Errorf(`ent: validator failed for field "Siteui.homepageImgUrl": %w`, err)}
		}
	}
	if v, ok := suo.mutation.HomepageText(); ok {
		if err := siteui.HomepageTextValidator(v); err != nil {
			return &ValidationError{Name: "homepageText", err: fmt.Errorf(`ent: validator failed for field "Siteui.homepageText": %w`, err)}
		}
	}
	if v, ok := suo.mutation.HomepageTextColor(); ok {
		if err := siteui.HomepageTextColorValidator(v); err != nil {
			return &ValidationError{Name: "homepageTextColor", err: fmt.Errorf(`ent: validator failed for field "Siteui.homepageTextColor": %w`, err)}
		}
	}
	if _, ok := suo.mutation.OwnerID(); suo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Siteui.owner"`)
	}
	return nil
}

func (suo *SiteuiUpdateOne) sqlSave(ctx context.Context) (_node *Siteui, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(siteui.Table, siteui.Columns, sqlgraph.NewFieldSpec(siteui.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Siteui.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, siteui.FieldID)
		for _, f := range fields {
			if !siteui.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != siteui.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(siteui.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Sitename(); ok {
		_spec.SetField(siteui.FieldSitename, field.TypeString, value)
	}
	if value, ok := suo.mutation.HomepageImgUrl(); ok {
		_spec.SetField(siteui.FieldHomepageImgUrl, field.TypeString, value)
	}
	if value, ok := suo.mutation.HomepageText(); ok {
		_spec.SetField(siteui.FieldHomepageText, field.TypeString, value)
	}
	if value, ok := suo.mutation.HomepageTextColor(); ok {
		_spec.SetField(siteui.FieldHomepageTextColor, field.TypeString, value)
	}
	if suo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   siteui.OwnerTable,
			Columns: []string{siteui.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   siteui.OwnerTable,
			Columns: []string{siteui.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Siteui{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{siteui.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
